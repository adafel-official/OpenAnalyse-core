{
  "address": "0x985987e8F47539F844F12371834CE058a969979E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "category",
          "type": "uint256"
        }
      ],
      "name": "NewAnalytics",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "columns",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "data",
          "type": "uint256[]"
        }
      ],
      "name": "addAnalytics",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "columns",
          "type": "bytes32[]"
        },
        {
          "internalType": "enum UserAnalytics.Category",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "addSchema",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "addUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "consumerCredits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dappAnalytics",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "enum UserAnalytics.Category",
          "name": "schemaCategory",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllSchemas",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "schemaName",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "columns",
              "type": "bytes32[]"
            },
            {
              "internalType": "enum UserAnalytics.Category",
              "name": "schemaCategory",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "totalRecords",
              "type": "uint256"
            }
          ],
          "internalType": "struct UserAnalytics.SchemaDetails[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        }
      ],
      "name": "getAnalyticsDataBySchemaName",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        }
      ],
      "name": "getColumnsOfSchema",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "k",
          "type": "uint64"
        }
      ],
      "name": "getRecommendedFollowers",
      "outputs": [
        {
          "internalType": "address[][]",
          "name": "",
          "type": "address[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getSchemaAddressToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        }
      ],
      "name": "getSchemaIdToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserActivityMatrix",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256[][]",
          "name": "similarityMatrix",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint64",
          "name": "k",
          "type": "uint64"
        }
      ],
      "name": "recommendFollowers",
      "outputs": [
        {
          "internalType": "address[][]",
          "name": "",
          "type": "address[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "schemaIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCategories",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "columns",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "data",
          "type": "uint256[]"
        }
      ],
      "name": "updateAnalytics",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newReward",
          "type": "uint256"
        }
      ],
      "name": "updateUserReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userActivityMatrix",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userRewardPerDatapoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x96295d907514a3a83b0178a85309d13344c9afe1b392504a4f05b4c4c7a3603c",
  "receipt": {
    "to": null,
    "from": "0x324CF97D4373ef009FDF2F1afFc58406C86899Af",
    "contractAddress": "0x985987e8F47539F844F12371834CE058a969979E",
    "transactionIndex": 0,
    "gasUsed": "56153218",
    "logsBloom": "0x
    "blockHash": "0xbf1dd4217966e59705f9e97455c9abc41fd5f4660a0ccd1366ba493ac5143125",
    "transactionHash": "0x96295d907514a3a83b0178a85309d13344c9afe1b392504a4f05b4c4c7a3603c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3074324,
        "transactionHash": "0x96295d907514a3a83b0178a85309d13344c9afe1b392504a4f05b4c4c7a3603c",
        "address": "0xff00000000000000000000000000000000000086",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000324cf97d4373ef009fdf2f1affc58406c86899af"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbf1dd4217966e59705f9e97455c9abc41fd5f4660a0ccd1366ba493ac5143125"
      }
    ],
    "blockNumber": 3074324,
    "cumulativeGasUsed": "56153218",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "0fafca276197fdb64a4997b11c3622c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"}],\"name\":\"NewAnalytics\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"columns\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"addAnalytics\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"columns\",\"type\":\"bytes32[]\"},{\"internalType\":\"enum UserAnalytics.Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"addSchema\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"addUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"consumerCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dappAnalytics\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"enum UserAnalytics.Category\",\"name\":\"schemaCategory\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSchemas\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"columns\",\"type\":\"bytes32[]\"},{\"internalType\":\"enum UserAnalytics.Category\",\"name\":\"schemaCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalRecords\",\"type\":\"uint256\"}],\"internalType\":\"struct UserAnalytics.SchemaDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"}],\"name\":\"getAnalyticsDataBySchemaName\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"}],\"name\":\"getColumnsOfSchema\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"k\",\"type\":\"uint64\"}],\"name\":\"getRecommendedFollowers\",\"outputs\":[{\"internalType\":\"address[][]\",\"name\":\"\",\"type\":\"address[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getSchemaAddressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"getSchemaIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserActivityMatrix\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[][]\",\"name\":\"similarityMatrix\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint64\",\"name\":\"k\",\"type\":\"uint64\"}],\"name\":\"recommendFollowers\",\"outputs\":[{\"internalType\":\"address[][]\",\"name\":\"\",\"type\":\"address[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"schemaIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCategories\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"columns\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"updateAnalytics\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"updateUserReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userActivityMatrix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userRewardPerDatapoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UserAnalytics.sol\":\"UserAnalytics\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/UserAnalytics.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract UserAnalytics is Ownable {\\n\\tuint256[][] public userActivityMatrix;\\n\\tmapping(address => uint256) public addressToId;\\n\\tmapping(uint256 => address) public idToAddress;\\n\\tmapping(address => uint256) public consumerCredits;\\n\\tmapping(bytes32 => uint256) public schemaIndex;\\n\\tuint256 public latestIndex;\\n\\tuint256 public totalCategories;\\n  uint256 public userRewardPerDatapoint;\\n\\n\\tenum Category {\\n\\t\\tGaming,\\n\\t\\tMarketplace,\\n\\t\\tDefi,\\n\\t\\tDao,\\n\\t\\tWeb3Social,\\n\\t\\tIdentity,\\n\\t\\tCertificates\\n\\t}\\n\\n  struct SchemaDetails {\\n    bytes32 schemaName;\\n\\t\\tbytes32[] columns;\\n\\t\\tCategory schemaCategory;\\n    uint256 totalRecords;\\n  }\\n\\n\\tstruct Analytics {\\n\\t\\tbytes32 schemaName;\\n\\t\\tbytes32[] columns;\\n\\t\\tCategory schemaCategory;\\n\\t\\tuint256[][] data;\\n\\t\\tmapping(address => uint256) addressToId;\\n\\t\\tmapping(uint256 => address) idToAddress;\\n\\t\\tmapping(bytes32 => uint256) columnToIndex;\\n\\t}\\n\\n\\tstruct similarityPair {\\n\\t\\tuint256 index;\\n\\t\\tuint256 similarity;\\n\\t}\\n\\n\\tAnalytics[] public dappAnalytics;\\n\\n\\tconstructor() Ownable() {\\n\\t\\tuint256[] memory initialMatrix;\\n\\t\\tuserActivityMatrix.push(initialMatrix);\\n\\t\\tlatestIndex = 0;\\n\\t\\ttotalCategories = 7;\\n\\t\\tdappAnalytics.push();\\n    userRewardPerDatapoint = 10000000000000000;\\n\\t}\\n\\n\\tevent NewAnalytics(address user, address provider, uint256 category);\\n\\n\\tfunction addUser(address userAddress) external {\\n\\t\\t// get the total length of current activity matrix\\n\\t\\tlatestIndex = latestIndex + 1;\\n\\t\\tuint256[] memory initialMatrix;\\n\\t\\tuserActivityMatrix.push(initialMatrix);\\n\\n\\t\\t// add the new user details\\n\\t\\tfor (uint256 i = 0; i < totalCategories; i++) {\\n\\t\\t\\tuserActivityMatrix[latestIndex].push(0);\\n\\t\\t}\\n\\n\\t\\t// add user id to address mapping\\n\\t\\taddressToId[userAddress] = latestIndex;\\n\\t\\tidToAddress[latestIndex] = userAddress;\\n\\t}\\n\\n\\tfunction addSchema(\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tCategory category\\n\\t) external {\\n\\t\\t// Cannot have two schema with same name\\n    require(schemaIndex[schemaName] == uint256(0), \\\"SCHEMA NAME EXISTS\\\");\\n\\n    // initializing schema with defaults\\n\\t\\tAnalytics storage analytics = dappAnalytics.push();\\n\\t\\tanalytics.schemaName = schemaName;\\n\\t\\tanalytics.schemaCategory = category;\\n\\t\\t\\n    uint256[] memory initialUser;\\n\\t\\tanalytics.data.push(initialUser);\\n\\t\\t\\n    for (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tanalytics.data[0].push(0);\\n\\t\\t\\tanalytics.columns.push(columns[i]);\\n\\t\\t\\tanalytics.columnToIndex[columns[i]] = i;\\n\\t\\t}\\n\\n\\t\\t// adding to schema index map\\n\\t\\tschemaIndex[schemaName] = dappAnalytics.length - 1;\\n\\t}\\n\\n\\tfunction addAnalytics(\\n\\t\\taddress payable userAddress,\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tuint256[] calldata data\\n\\t) public payable {\\n\\t\\trequire(schemaIndex[schemaName] != 0, \\\"SCHEMA NOT PRESENT\\\");\\n\\n\\t\\t// add user if not already present\\n\\t\\tif (addressToId[userAddress] == 0) {\\n\\t\\t\\tthis.addUser(userAddress);\\n\\t\\t}\\n\\n\\t\\t// retrieve storage instance\\n\\t\\tAnalytics storage schemaAnalytics = dappAnalytics[\\n\\t\\t\\tschemaIndex[schemaName]\\n\\t\\t];\\n\\n\\t\\t// push new user if not already present\\n\\t\\tif (schemaAnalytics.addressToId[userAddress] == 0) {\\n\\t\\t\\tschemaAnalytics.data.push();\\n\\t\\t\\tfor (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\\n\\t\\t\\t\\tschemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\\n\\t\\t\\t}\\n\\n\\t\\t\\tschemaAnalytics.addressToId[userAddress] =\\n\\t\\t\\t\\tschemaAnalytics.data.length -\\n\\t\\t\\t\\t1;\\n\\t\\t\\tschemaAnalytics.idToAddress[\\n\\t\\t\\t\\tschemaAnalytics.data.length - 1\\n\\t\\t\\t] = userAddress;\\n\\t\\t}\\n\\n\\t\\t// add to the existing data\\n\\t\\tfor (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tschemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\\n\\t\\t\\t\\tschemaAnalytics.columnToIndex[columns[i]]\\n\\t\\t\\t] += data[i];\\n\\t\\t}\\n\\n\\t\\tuserActivityMatrix[addressToId[userAddress]][\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t] += 1;\\n\\n\\t\\t// rewarding the users for sharing data\\n\\t\\tbool sent = userAddress.send(userRewardPerDatapoint);\\n\\t\\trequire(sent, \\\"Failed to reward user\\\");\\n\\n\\t\\t// increasing credit limit for provider\\n\\t\\tconsumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\\n\\n\\t\\temit NewAnalytics(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction updateAnalytics(\\n\\t\\taddress payable userAddress,\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tuint256[] calldata data\\n\\t) public payable {\\n\\t\\t// add user if not already present\\n\\t\\tif (addressToId[userAddress] == 0) {\\n\\t\\t\\tthis.addUser(userAddress);\\n\\t\\t}\\n\\n\\t\\t// retrieve storage instance\\n\\t\\tAnalytics storage schemaAnalytics = dappAnalytics[\\n\\t\\t\\tschemaIndex[schemaName]\\n\\t\\t];\\n\\n\\t\\t// push new user if not already present\\n\\t\\tif (schemaAnalytics.addressToId[userAddress] == 0) {\\n\\t\\t\\tschemaAnalytics.data.push();\\n\\t\\t\\tfor (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\\n\\t\\t\\t\\tschemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\\n\\t\\t\\t}\\n\\n\\t\\t\\tschemaAnalytics.addressToId[userAddress] =\\n\\t\\t\\t\\tschemaAnalytics.data.length -\\n\\t\\t\\t\\t1;\\n\\t\\t\\tschemaAnalytics.idToAddress[\\n\\t\\t\\t\\tschemaAnalytics.data.length - 1\\n\\t\\t\\t] = userAddress;\\n\\t\\t}\\n\\n\\t\\t// replace the existing user data with new one\\n\\t\\tfor (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tschemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\\n\\t\\t\\t\\tschemaAnalytics.columnToIndex[columns[i]]\\n\\t\\t\\t] = data[i];\\n\\t\\t}\\n\\n\\t\\tuserActivityMatrix[addressToId[userAddress]][\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t] += 1;\\n\\n\\t\\t// rewarding the users for sharing data\\n\\t\\tbool sent = userAddress.send(userRewardPerDatapoint);\\n\\t\\trequire(sent, \\\"Failed to reward user\\\");\\n\\n\\t\\t// increasing credit limit for provider\\n\\t\\tconsumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\\n\\n\\t\\temit NewAnalytics(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t);\\n\\t}\\n\\n  function updateUserReward(uint256 newReward) external onlyOwner {\\n    userRewardPerDatapoint = newReward;\\n  }\\n\\n\\tfunction getUserActivityMatrix()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[][] memory)\\n\\t{\\n\\t\\treturn userActivityMatrix;\\n\\t}\\n\\n  function getAllSchemas() external view returns (SchemaDetails[] memory) {\\n    SchemaDetails[] memory schemaDetails = new SchemaDetails[](dappAnalytics.length - 1);\\n    for (uint256 i = 1; i < dappAnalytics.length; i++) {\\n      // bytes32[] memory schemaColumns = new bytes32[](dappAnalytics[i].columns.length);\\n      SchemaDetails memory schemaDetail;\\n      schemaDetail.schemaName = dappAnalytics[i].schemaName;\\n      schemaDetail.columns = dappAnalytics[i].columns;\\n      schemaDetail.schemaCategory = dappAnalytics[i].schemaCategory;\\n      schemaDetail.totalRecords = dappAnalytics[i].data.length;\\n      schemaDetails[i - 1] = schemaDetail;\\n    }\\n\\n    return schemaDetails;\\n  }\\n\\n\\tfunction getAnalyticsDataBySchemaName(\\n\\t\\tbytes32 schemaName\\n\\t) external view returns (uint256[][] memory) {\\n\\t\\treturn dappAnalytics[schemaIndex[schemaName]].data;\\n\\t}\\n\\n\\tfunction getColumnsOfSchema(\\n\\t\\tbytes32 schemaName\\n\\t) external view returns (bytes32[] memory) {\\n\\t\\treturn dappAnalytics[schemaIndex[schemaName]].columns;\\n\\t}\\n\\n  function getSchemaAddressToId(\\n    bytes32 schemaName,\\n    address userAddress\\n  ) external view returns (uint256) {\\n    return dappAnalytics[schemaIndex[schemaName]].addressToId[userAddress];\\n  }\\n\\n  function getSchemaIdToAddress(\\n    bytes32 schemaName,\\n    uint256 userId\\n  ) external view returns (address) {\\n    return dappAnalytics[schemaIndex[schemaName]].idToAddress[userId];\\n  }\\n\\n\\tfunction getRecommendedFollowers(\\n\\t\\taddress userAddress,\\n\\t\\tuint64 k\\n\\t) external view returns (address[][] memory) {\\n\\t\\tuint256[][] memory similarityMatrix = computeSimilarityMatrix();\\n\\n\\t\\taddress[][] memory recommendedFollowers = recommendFollowers(\\n\\t\\t\\taddressToId[userAddress],\\n\\t\\t\\tsimilarityMatrix,\\n\\t\\t\\tk\\n\\t\\t);\\n\\n\\t\\treturn recommendedFollowers;\\n\\t}\\n\\n\\t// Function to calculate cosine similarity between two users\\n\\tfunction cosineSimilarity(\\n\\t\\tuint256[] memory user1,\\n\\t\\tuint256[] memory user2\\n\\t) internal pure returns (uint256) {\\n\\t\\tuint256 dotProduct = dot(user1, user2);\\n\\t\\tuint256 normUser1 = sqrt(dot(user1, user1));\\n\\t\\tuint256 normUser2 = sqrt(dot(user2, user2));\\n\\t\\treturn ((dotProduct * 100) / normUser1) * normUser2;\\n\\t}\\n\\n\\t// Function to compute user-user similarity matrix\\n\\tfunction computeSimilarityMatrix()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256[][] memory)\\n\\t{\\n\\t\\tuint256 numUsers = userActivityMatrix.length;\\n\\t\\tuint256[][] memory similarityMatrix = new uint256[][](numUsers);\\n\\n\\t\\t// similarityMatrix.push();\\n\\t\\tfor (uint256 i = 1; i < numUsers; i++) {\\n\\t\\t\\tuint256[] memory row = new uint256[](numUsers);\\n\\t\\t\\tsimilarityMatrix[i] = row;\\n\\n\\t\\t\\tfor (uint64 j = 1; j < numUsers; j++) {\\n\\t\\t\\t\\tuint256[] memory user1 = userActivityMatrix[i];\\n\\t\\t\\t\\tuint256[] memory user2 = userActivityMatrix[j];\\n\\t\\t\\t\\tsimilarityMatrix[i][j] = cosineSimilarity(user1, user2);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn similarityMatrix;\\n\\t}\\n\\n\\t// Function to recommend followers for a given user\\n\\tfunction recommendFollowers(\\n\\t\\tuint256 userIndex,\\n\\t\\tuint256[][] memory similarityMatrix,\\n\\t\\tuint64 k\\n\\t) public view returns (address[][] memory) {\\n\\t\\tsimilarityPair[] memory similarUsers = new similarityPair[](\\n\\t\\t\\tsimilarityMatrix[userIndex].length - 1\\n\\t\\t);\\n\\t\\tuint256 idx = 0;\\n\\n\\t\\t// Find k most similar users to the target user\\n\\t\\tfor (uint256 j = 1; j < similarityMatrix[userIndex].length; j++) {\\n\\t\\t\\tif (j != userIndex) {\\n\\t\\t\\t\\tsimilarityPair memory row;\\n\\t\\t\\t\\trow.index = j;\\n\\t\\t\\t\\trow.similarity = similarityMatrix[userIndex][j];\\n\\t\\t\\t\\tsimilarUsers[idx] = row;\\n\\t\\t\\t\\tidx += 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Sort similar users by descending similarity\\n\\t\\tsimilarUsers = bubbleSort(similarUsers);\\n\\n\\t\\t// Recommend followers from the top k similar users\\n\\t\\taddress[][] memory recommendedFollowers = new address[][](\\n\\t\\t\\ttotalCategories\\n\\t\\t);\\n\\t\\tfor (uint64 i = 0; i < k; i++) {\\n\\t\\t\\tuint64 _idx = 0;\\n\\t\\t\\tfor (uint256 j = 0; j < totalCategories; j++) {\\n\\t\\t\\t\\taddress[] memory followerRow = new address[](k);\\n\\t\\t\\t\\trecommendedFollowers[j] = followerRow;\\n\\t\\t\\t\\tif (userActivityMatrix[similarUsers[i].index][j] > 0) {\\n\\t\\t\\t\\t\\trecommendedFollowers[j][_idx] = idToAddress[\\n\\t\\t\\t\\t\\t\\tsimilarUsers[i].index\\n\\t\\t\\t\\t\\t];\\n\\t\\t\\t\\t\\t_idx = _idx + 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn recommendedFollowers;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Bubble sort.\\n\\t */\\n\\tfunction bubbleSort(\\n\\t\\tsimilarityPair[] memory similarUsers\\n\\t) internal pure returns (similarityPair[] memory) {\\n\\t\\tuint256 n = similarUsers.length;\\n\\t\\tfor (uint256 i = 0; i < n - 1; i++) {\\n\\t\\t\\tfor (uint256 j = 0; j < n - i - 1; j++) {\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\tsimilarUsers[j].similarity > similarUsers[j + 1].similarity\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t(similarUsers[j], similarUsers[j + 1]) = (\\n\\t\\t\\t\\t\\t\\tsimilarUsers[j + 1],\\n\\t\\t\\t\\t\\t\\tsimilarUsers[j]\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn similarUsers;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the square root of a number.\\n\\t */\\n\\tfunction sqrt(uint256 x) internal pure returns (uint256) {\\n\\t\\tuint256 z = (x + 1) / 2;\\n\\t\\tuint256 y = x;\\n\\t\\twhile (z < y) {\\n\\t\\t\\ty = z;\\n\\t\\t\\tz = ((x / z) + z) / 2;\\n\\t\\t}\\n\\t\\treturn y;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the dot product of two vectors.\\n\\t */\\n\\tfunction dot(\\n\\t\\tuint256[] memory x,\\n\\t\\tuint256[] memory y\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(x.length == y.length);\\n\\n\\t\\tuint256 output;\\n\\t\\tfor (uint256 i = 0; i < x.length; i++) {\\n\\t\\t\\toutput = (x[i] * y[i]) + output;\\n\\t\\t}\\n\\n\\t\\treturn output;\\n\\t}\\n\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0x370aa8c2e4895a008567f41703d56074bedd6f8600d01ef96c2cab63ec639b51\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234620001a15760008054336001600160a01b0319821681178355906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a360018054906801000000000000000091828110156200018d57818101808355811015620001795781845260208085206060519201906001600160401b0383116200016557848311620001655781548383558084106200013b575b5060809186528086209084875b85811062000128575050505050508260065560078055600954918210156200011457810190816009551015620001005760099052662386f26fc10000600855611edc9081620001a78239f35b634e487b7160e01b81526032600452602490fd5b634e487b7160e01b83526041600452602483fd5b82855195019481850155018590620000b4565b828752848483892092830192015b82811062000159575050620000a7565b88815501859062000149565b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b84526032600452602484fd5b634e487b7160e01b84526041600452602484fd5b600080fdfe60806040818152600480361015610021575b505050361561001f57600080fd5b005b600092833560e01c90816302fa955d1461136d5750806306be2b41146112e15780631060192e146112bf578063165a055c1461123a57806326fdc0f6146111b15780632a2d0c471461117f5780632a45e1ed1461111257806334aa962314610d4057806339275b0a14610d215780634120651514610c13578063421b2d8b14610a78578063578f2aa014610a59578063715018a6146109fc57806380a13096146109ba57806380eb65ae146109935780638343d5e6146107045780638b12ed54146106bc5780638da5cb5b146106945780639fba53bf146104ab578063a9d2e2d714610476578063cb0e0d7d1461043e578063dd39e52214610284578063f2fde38b146101b8578063f5096a7d146101955763fa2e47cc0361001157346101915781600319360112610191576024356001600160a01b0381169081900361018c57610178836020958435815260058752205461169f565b509060005201825280600020549051908152f35b600080fd5b8280fd5b5050346101b457816003193601126101b4576020906008549051908152f35b5080fd5b5034610191576020366003190112610191576101d261185f565b906101db6118a9565b6001600160a01b03918216928315610232575050600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b503461019157816003193601126101915761029d61185f565b906024938435926001600160401b0395868516850361018c576001908154916102c5836117ac565b956102d28951978861178b565b838752601f1992836102e3866117ac565b019a6102f360209c8d8b01611a7f565b835b86811061032f57505061032b8a6103208b8b8f8c600286928e60018060a01b03168352522054611afd565b9051918291826117c3565b0390f35b610338876117ac565b6103448d51918261178b565b8781528d876103528a6117ac565b01903690830137610363828c611a6b565b5261036e818b611a6b565b5084805b610386575b5061038190611937565b6102f5565b82811688811015610438576103a361039d84611713565b506119e5565b6103af61039d84611713565b6103d86103cc6103d16103cc6103c58587611e55565b9580611e55565b611e17565b9280611e55565b9160649081810291818304149015171561042657610420938f928761040e8d98966104096104149461041a97611ab4565b611924565b94611a6b565b51611a6b565b52611a9c565b90610372565b634e487b7160e01b8e5260118952878efd5b50610377565b5050346101b45760203660031901126101b45760209181906001600160a01b0361046661185f565b1681526002845220549051908152f35b50346101915760203660031901126101915760209282916001600160a01b0361049d61185f565b168252845220549051908152f35b508290346101b457816003193601126101b457600954916000199182840193808511610681576104dd859496956117ac565b936104ea8651958661178b565b8085526104f9601f19916117ac565b01835b818110610662575050600195865b8281106105a557505050508251938493602080860191818752855180935280870182828560051b8a0101970195915b8483106105465788880389f35b9193959750919384808298603f198c82030186528a5190815181526105778383015160808086850152830190611875565b9161058887820151888401906116f0565b606080910151910152990193019301909288979694929593610539565b6105b197959697611a36565b6105ba8261169f565b505481526105d2876105cb8461169f565b50016119e5565b602082015260ff60026105e48461169f565b50015416600781101561064f578982015260036106008361169f565b50015460608201528282019082821161063c578161062d9161062661063395948c611a6b565b5289611a6b565b50611937565b9695949661050a565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b875260218652602487fd5b60209061067198969798611a36565b82828a01015201969594966104fc565b634e487b7160e01b835260118252602483fd5b5050346101b457816003193601126101b457905490516001600160a01b039091168152602090f35b5034610191578160031936011261019157916020923581526005835260056106e68383205461169f565b5060243583520183528190205490516001600160a01b039091168152f35b509034610191576060366003190112610191576001600160401b0382356024803583811161098f57610739903690870161157b565b909360443591600783101561098b5784895260209560058752878a20546109545760095493600160401b90818610156109425761077d60019687810160095561169f565b5090888255600282019060ff80198354169116179055600381019485548381101561091b5780886107b1920188558761174a565b61092f5760605191821161091b5783821161091b5780548282558083106108f1575b506080979697906000528a60002060005b8381106108e057505050508b9460068183019201955b85811061083857505050505050505060095494600019860195861161082757505084526005905282205580f35b634e487b7160e01b87526011905285fd5b8754156108cc578760005261084f8b600020611946565b61085a818787611974565b358354858110156108b857918f8e908a8f849561089b610882898b6108b39b018d558c61174a565b819391549060031b600019811b9283911b169119161790565b90556108a8858d8d611974565b358352522055611937565b6107fa565b5050634e487b7160e01b8e5260418d52888efd5b8860328e634e487b7160e01b600052526000fd5b825182820155918c019188016107e4565b8160005288838d60002092830192015b82811061090f5750506107d3565b60008155018990610901565b8860418e634e487b7160e01b600052526000fd5b8860008e634e487b7160e01b8252526000fd5b634e487b7160e01b8c5260418b52868cfd5b875162461bcd60e51b8152808a0188905260128187015271534348454d41204e414d452045584953545360701b6044820152606490fd5b8880fd5b8680fd5b50346101915760203660031901126101915760209282913581526005845220549051908152f35b50346101915760203660031901126101915760016105cb8361032b956109e9943581526005602052205461169f565b9051918291602083526020830190611875565b8334610a565780600319360112610a5657610a156118a9565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5050346101b457816003193601126101b4576020906006549051908152f35b50903461019157602080600319360112610c0f57610a9461185f565b92600690815490600191828101809111610bfc578355815490600160401b9182811015610bd3578084610ac992018555611713565b919091610be857606051926001600160401b038411610bd3578311610bbe57508054828255808310610b94575b50608090600052846000208360005b848110610b8257509250505086905b610b51575b5050546001600160a01b039093168085526002825282852084905592845260039052822080546001600160a01b031916909117905580f35b600754811015610b7d57610b7790610b72610b6c8554611713565b50611946565b611937565b81610b14565b610b19565b87845194019381840155018490610b05565b8160005283838760002092830192015b828110610bb2575050610af6565b60008155018490610ba4565b604190634e487b7160e01b6000525260246000fd5b604182634e487b7160e01b6000525260246000fd5b600090634e487b7160e01b82525260246000fd5b634e487b7160e01b885260118252602488fd5b8380fd5b50346101915760603660031901126101915760248035936001600160401b03918286116101b457366023870112156101b4578584013595610c53876117ac565b96610c608751988961178b565b8088526020928389019181600591821b8501019336851161098f57828101935b858510610ca4578b8b8b604435808d16810361018c5761032b936103209235611afd565b843589811161098b5782013660438201121561098b5780858d920135610cd5610ccc826117ac565b9351938461178b565b8083528983019060448091881b84010192368411610d1d57908b9492959391015b818110610d0d575050829350815201940193610c80565b80358652948401948b9401610cf6565b8c80fd5b5050346101b457816003193601126101b4576020906007549051908152f35b509190610d4c366115ab565b848895939295526020936005855287892054156110da576001600160a01b038716808a5260028652888a205490949015611081575b895260058552610d93888a205461169f565b50958a87019385600052848752896000205415610fa9575b878a9294958c968d600398898c8c60068389019801995b898510610f1d57509a505050509550505050505052600283526002610de987892054611713565b5094019360ff855416906007821015610f0a5790610e069161174a565b81928192549283911b1c9160018301809311610ef757610e54948a94610e408695869586959060031b600019811b9283911b169119161790565b905560085490828215610eee575bf16119a1565b338552858152838520549060018201809211610edb57338652869052838520555460ff16916007831015610ec857516001600160a01b0391909116815233602082015260408101919091527f3a5918ca939d93e6bd42ac6f2f818c05e35a0fec0af9c4e1fd1f2b32db4e2f0d90606090a180f35b634e487b7160e01b845260218552602484fd5b634e487b7160e01b865260118752602486fd5b506108fc610e4e565b634e487b7160e01b8a5260118b5260248afd5b634e487b7160e01b895260218a52602489fd5b610f6f8c610f80928f988e610f96978f8f8f918f610f9d9f928f9394610f4a85610f5c94610f6398611974565b359d600052865288600020549061174a565b5097611974565b3583525220549061174a565b928195849392549485911b1c611901565b919060031b600019811b9283911b169119161790565b9055611937565b8e90898f8c8e91610dc2565b60038801610fb681611984565b50600190508981018d825b611039575b505081546000199291508281019081116110245788600052878a528c6000205554908101908111611011578b52600588018752898b2080546001600160a01b03191687179055610dab565b634e487b7160e01b8c5260118d5260248cfd5b5050634e487b7160e01b8c5260118d5260248cfd5b815481101561107c57835460001981019081116110675790610b72610b6c611061938761174a565b82610fc1565b508f8f6011602492634e487b7160e01b835252fd5b610fc6565b303b156110cc57885163421b2d8b60e01b81528b81018690528a8160248183305af180156110d057908b916110b8575b5050610d81565b6110c190611762565b6110cc5789386110b1565b8980fd5b8a513d8d823e3d90fd5b875162461bcd60e51b8152808b01869052601260248201527114d0d2115350481393d50814149154d1539560721b6044820152606490fd5b50346101915781600319360112610191573591602435926001548110156101b45760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601908154841015610a5657506020926111719161174a565b91905490519160031b1c8152f35b50346101915760203660031901126101915735825260036020908152918190205490516001600160a01b039091168152f35b508290346101b45760203660031901126101b4573590600954821015610a56575060079060096000520261123860ff7f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b1837f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af015493015416835192835260208301906116f0565bf35b508234610a5657602091826003193601126101b457836003926112659235815260058552205461169f565b5001805490611273826117ac565b926112808551948561178b565b82845260009182528082208185015b8484106112a35786518061032b888261160d565b60018381926112b1856119e5565b81520192019301929061128f565b8382346101b45760203660031901126101b4576112da6118a9565b3560085580f35b828434610a565780600319360112610a5657506001805490611302826117ac565b9161130f8451938461178b565b808352600082815260207fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68186015b8484106113525787518061032b898261160d565b8583819261135f856119e5565b81520192019301929061133e565b8484849261137a366115ab565b91949593929060018060a01b03871693848a5260209560028752898b205415611539575b508952600585526113b1888a205461169f565b50958a8701938560005284875289600020541561149e575b91936006880192600389019190888d898e825b88841061146b579950509850505050505050505260028252600261140286882054611713565b5093019260ff845416906007821015611458579061141f9161174a565b815490818160031b1c9160018301809311610ef757610e54948a94610e408695869586959060031b600019811b9283911b169119161790565b634e487b7160e01b885260218952602488fd5b8a610f9692610882928c8f98610f63898f8f8f908f916114939f85610f5c94610f4a92611974565b8990898f8f906113dc565b600388016114ab81611984565b50600190508981018d825b611506575b505081546000199291508281019081116110245788600052878a528c6000205554908101908111611011578b52600588018752898b2080546001600160a01b031916871790556113c9565b815481101561153457835460001981019081116110675790610b72610b6c61152e938761174a565b826114b6565b6114bb565b303b156115775763421b2d8b60e01b81528b81018690528a8160248183305af180156110d0571561139e57611570909a919a611762565b988b61139e565b8a80fd5b9181601f8401121561018c578235916001600160401b03831161018c576020808501948460051b01011161018c57565b608060031982011261018c576004356001600160a01b038116810361018c5791602435916001600160401b039160443583811161018c57826115ef9160040161157b565b9390939260643591821161018c576116099160040161157b565b9091565b602080820190808352835180925260408301928160408460051b830101950193600080925b858410611643575050505050505090565b9091929380959697603f1983820301855288519082808351928381520192019085905b808210611686575050509080600192990194019401929594939190611632565b9193806001929486518152019401920188939291611666565b6009548110156116da576007906009600052027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0190600090565b634e487b7160e01b600052603260045260246000fd5b9060078210156116fd5752565b634e487b7160e01b600052602160045260246000fd5b6001548110156116da5760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b80548210156116da5760005260206000200190600090565b6001600160401b03811161177557604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b0382111761177557604052565b6001600160401b0381116117755760051b60200190565b602080820190808352835180925260408301928160408460051b830101950193600080925b8584106117f9575050505050505090565b9091929380959697603f1983820301855288519082808351928381520192019085905b80821061183c5750505090806001929901940194019295949391906117e8565b82516001600160a01b03168452899493840193909201916001919091019061181c565b600435906001600160a01b038216820361018c57565b90815180825260208080930193019160005b828110611895575050505090565b835185529381019392810192600101611887565b6000546001600160a01b031633036118bd57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b9190820180921161190e57565b634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561190e57565b600019811461190e5760010190565b8054600160401b811015611775576119639160018201815561174a565b8154906000199060031b1b19169055565b91908110156116da5760051b0190565b8054600160401b811015611775576116099160018201815561174a565b156119a857565b60405162461bcd60e51b81526020600482015260156024820152742330b4b632b2103a37903932bbb0b932103ab9b2b960591b6044820152606490fd5b9060405191828154918282526020928383019160005283600020936000905b828210611a1c57505050611a1a9250038361178b565b565b855484526001958601958895509381019390910190611a04565b60405190608082018281106001600160401b038211176117755760405260006060838281528160208201528260408201520152565b80518210156116da5760209160051b010190565b60005b828110611a8e57505050565b606082820152602001611a82565b6001600160401b0380911690811461190e5760010190565b8115611abe570490565b634e487b7160e01b600052601260045260246000fd5b60405190604082018281106001600160401b038211176117755760405260006020838281520152565b929190611b0a8482611a6b565b51516000198082019591861161190e57611b44611b26876117ac565b94604097611b368951978861178b565b808752601f199283916117ac565b0160005b818110611e0057505060009760015b611b618688611a6b565b5151811015611bc757858103611b80575b611b7b90611937565b611b57565b98611b89611ad4565b8a8152611b9a8b610414898b611a6b565b516020820152611baa828a611a6b565b52611bb58189611a6b565b506001810180911161190e5798611b72565b509450925090949395508551926000948685019385851193845b61190e5785881015611ca15760005b88880388811161190e578a810190811161190e57811015611c835760209081611c19828e611a6b565b510151600182019081831161190e57828e91611c4a95611c398585611a6b565b51015110611c4f575b505050611937565b611bf0565b81611c5d84611c7a94611a6b565b5193611c74611c6c8484611a6b565b519183611a6b565b52611a6b565b52388c82611c42565b50919396611c949095919395611937565b9693918495939195611be1565b9450945095509593505060075492611cb8846117ac565b90611cc58751928361178b565b84825282611cd2866117ac565b01611ce1602091828501611a7f565b60005b6001600160401b0380871681831681811015611df25760009182888e5b8d8310611d1d5750505050505050611d1890611a9c565b611ce4565b8690611d28856117ac565b611d348251918261178b565b8581528d611d41876117ac565b01368c830137611d518585611a6b565b52611d5c8484611a6b565b508a8a611d7d86611d77611d708b86611a6b565b5151611713565b5061174a565b929054600393841b1c611da1575b505050505050611d9a90611937565b888e611d01565b95611ddd93819a969593611dd393611dbb8c60019b611a6b565b515160005252878060a01b0390600020541694611a6b565b5193168093611a6b565b520184811161190e579288858f388a8c611d8b565b509499505050505050505050565b602090611e0b611ad4565b82828b01015201611b48565b600180820180831161190e57811c90825b838310611e355750505090565b90919250611e4c83611e478184611ab4565b611901565b821c9190611e28565b90815181510361018c57600091825b8151841015611e9f57611e93611e9991611e47611e818786611a6b565b51611e8c8888611a6b565b5190611924565b93611937565b92611e64565b925050509056fea2646970667358221220c5045a634863a6faf072120c7ae549ad4d7254389e658881ed9f6eff11e4862a64736f6c63430008110033",
  "deployedBytecode": "0x60806040818152600480361015610021575b505050361561001f57600080fd5b005b600092833560e01c90816302fa955d1461136d5750806306be2b41146112e15780631060192e146112bf578063165a055c1461123a57806326fdc0f6146111b15780632a2d0c471461117f5780632a45e1ed1461111257806334aa962314610d4057806339275b0a14610d215780634120651514610c13578063421b2d8b14610a78578063578f2aa014610a59578063715018a6146109fc57806380a13096146109ba57806380eb65ae146109935780638343d5e6146107045780638b12ed54146106bc5780638da5cb5b146106945780639fba53bf146104ab578063a9d2e2d714610476578063cb0e0d7d1461043e578063dd39e52214610284578063f2fde38b146101b8578063f5096a7d146101955763fa2e47cc0361001157346101915781600319360112610191576024356001600160a01b0381169081900361018c57610178836020958435815260058752205461169f565b509060005201825280600020549051908152f35b600080fd5b8280fd5b5050346101b457816003193601126101b4576020906008549051908152f35b5080fd5b5034610191576020366003190112610191576101d261185f565b906101db6118a9565b6001600160a01b03918216928315610232575050600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b503461019157816003193601126101915761029d61185f565b906024938435926001600160401b0395868516850361018c576001908154916102c5836117ac565b956102d28951978861178b565b838752601f1992836102e3866117ac565b019a6102f360209c8d8b01611a7f565b835b86811061032f57505061032b8a6103208b8b8f8c600286928e60018060a01b03168352522054611afd565b9051918291826117c3565b0390f35b610338876117ac565b6103448d51918261178b565b8781528d876103528a6117ac565b01903690830137610363828c611a6b565b5261036e818b611a6b565b5084805b610386575b5061038190611937565b6102f5565b82811688811015610438576103a361039d84611713565b506119e5565b6103af61039d84611713565b6103d86103cc6103d16103cc6103c58587611e55565b9580611e55565b611e17565b9280611e55565b9160649081810291818304149015171561042657610420938f928761040e8d98966104096104149461041a97611ab4565b611924565b94611a6b565b51611a6b565b52611a9c565b90610372565b634e487b7160e01b8e5260118952878efd5b50610377565b5050346101b45760203660031901126101b45760209181906001600160a01b0361046661185f565b1681526002845220549051908152f35b50346101915760203660031901126101915760209282916001600160a01b0361049d61185f565b168252845220549051908152f35b508290346101b457816003193601126101b457600954916000199182840193808511610681576104dd859496956117ac565b936104ea8651958661178b565b8085526104f9601f19916117ac565b01835b818110610662575050600195865b8281106105a557505050508251938493602080860191818752855180935280870182828560051b8a0101970195915b8483106105465788880389f35b9193959750919384808298603f198c82030186528a5190815181526105778383015160808086850152830190611875565b9161058887820151888401906116f0565b606080910151910152990193019301909288979694929593610539565b6105b197959697611a36565b6105ba8261169f565b505481526105d2876105cb8461169f565b50016119e5565b602082015260ff60026105e48461169f565b50015416600781101561064f578982015260036106008361169f565b50015460608201528282019082821161063c578161062d9161062661063395948c611a6b565b5289611a6b565b50611937565b9695949661050a565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b875260218652602487fd5b60209061067198969798611a36565b82828a01015201969594966104fc565b634e487b7160e01b835260118252602483fd5b5050346101b457816003193601126101b457905490516001600160a01b039091168152602090f35b5034610191578160031936011261019157916020923581526005835260056106e68383205461169f565b5060243583520183528190205490516001600160a01b039091168152f35b509034610191576060366003190112610191576001600160401b0382356024803583811161098f57610739903690870161157b565b909360443591600783101561098b5784895260209560058752878a20546109545760095493600160401b90818610156109425761077d60019687810160095561169f565b5090888255600282019060ff80198354169116179055600381019485548381101561091b5780886107b1920188558761174a565b61092f5760605191821161091b5783821161091b5780548282558083106108f1575b506080979697906000528a60002060005b8381106108e057505050508b9460068183019201955b85811061083857505050505050505060095494600019860195861161082757505084526005905282205580f35b634e487b7160e01b87526011905285fd5b8754156108cc578760005261084f8b600020611946565b61085a818787611974565b358354858110156108b857918f8e908a8f849561089b610882898b6108b39b018d558c61174a565b819391549060031b600019811b9283911b169119161790565b90556108a8858d8d611974565b358352522055611937565b6107fa565b5050634e487b7160e01b8e5260418d52888efd5b8860328e634e487b7160e01b600052526000fd5b825182820155918c019188016107e4565b8160005288838d60002092830192015b82811061090f5750506107d3565b60008155018990610901565b8860418e634e487b7160e01b600052526000fd5b8860008e634e487b7160e01b8252526000fd5b634e487b7160e01b8c5260418b52868cfd5b875162461bcd60e51b8152808a0188905260128187015271534348454d41204e414d452045584953545360701b6044820152606490fd5b8880fd5b8680fd5b50346101915760203660031901126101915760209282913581526005845220549051908152f35b50346101915760203660031901126101915760016105cb8361032b956109e9943581526005602052205461169f565b9051918291602083526020830190611875565b8334610a565780600319360112610a5657610a156118a9565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5050346101b457816003193601126101b4576020906006549051908152f35b50903461019157602080600319360112610c0f57610a9461185f565b92600690815490600191828101809111610bfc578355815490600160401b9182811015610bd3578084610ac992018555611713565b919091610be857606051926001600160401b038411610bd3578311610bbe57508054828255808310610b94575b50608090600052846000208360005b848110610b8257509250505086905b610b51575b5050546001600160a01b039093168085526002825282852084905592845260039052822080546001600160a01b031916909117905580f35b600754811015610b7d57610b7790610b72610b6c8554611713565b50611946565b611937565b81610b14565b610b19565b87845194019381840155018490610b05565b8160005283838760002092830192015b828110610bb2575050610af6565b60008155018490610ba4565b604190634e487b7160e01b6000525260246000fd5b604182634e487b7160e01b6000525260246000fd5b600090634e487b7160e01b82525260246000fd5b634e487b7160e01b885260118252602488fd5b8380fd5b50346101915760603660031901126101915760248035936001600160401b03918286116101b457366023870112156101b4578584013595610c53876117ac565b96610c608751988961178b565b8088526020928389019181600591821b8501019336851161098f57828101935b858510610ca4578b8b8b604435808d16810361018c5761032b936103209235611afd565b843589811161098b5782013660438201121561098b5780858d920135610cd5610ccc826117ac565b9351938461178b565b8083528983019060448091881b84010192368411610d1d57908b9492959391015b818110610d0d575050829350815201940193610c80565b80358652948401948b9401610cf6565b8c80fd5b5050346101b457816003193601126101b4576020906007549051908152f35b509190610d4c366115ab565b848895939295526020936005855287892054156110da576001600160a01b038716808a5260028652888a205490949015611081575b895260058552610d93888a205461169f565b50958a87019385600052848752896000205415610fa9575b878a9294958c968d600398898c8c60068389019801995b898510610f1d57509a505050509550505050505052600283526002610de987892054611713565b5094019360ff855416906007821015610f0a5790610e069161174a565b81928192549283911b1c9160018301809311610ef757610e54948a94610e408695869586959060031b600019811b9283911b169119161790565b905560085490828215610eee575bf16119a1565b338552858152838520549060018201809211610edb57338652869052838520555460ff16916007831015610ec857516001600160a01b0391909116815233602082015260408101919091527f3a5918ca939d93e6bd42ac6f2f818c05e35a0fec0af9c4e1fd1f2b32db4e2f0d90606090a180f35b634e487b7160e01b845260218552602484fd5b634e487b7160e01b865260118752602486fd5b506108fc610e4e565b634e487b7160e01b8a5260118b5260248afd5b634e487b7160e01b895260218a52602489fd5b610f6f8c610f80928f988e610f96978f8f8f918f610f9d9f928f9394610f4a85610f5c94610f6398611974565b359d600052865288600020549061174a565b5097611974565b3583525220549061174a565b928195849392549485911b1c611901565b919060031b600019811b9283911b169119161790565b9055611937565b8e90898f8c8e91610dc2565b60038801610fb681611984565b50600190508981018d825b611039575b505081546000199291508281019081116110245788600052878a528c6000205554908101908111611011578b52600588018752898b2080546001600160a01b03191687179055610dab565b634e487b7160e01b8c5260118d5260248cfd5b5050634e487b7160e01b8c5260118d5260248cfd5b815481101561107c57835460001981019081116110675790610b72610b6c611061938761174a565b82610fc1565b508f8f6011602492634e487b7160e01b835252fd5b610fc6565b303b156110cc57885163421b2d8b60e01b81528b81018690528a8160248183305af180156110d057908b916110b8575b5050610d81565b6110c190611762565b6110cc5789386110b1565b8980fd5b8a513d8d823e3d90fd5b875162461bcd60e51b8152808b01869052601260248201527114d0d2115350481393d50814149154d1539560721b6044820152606490fd5b50346101915781600319360112610191573591602435926001548110156101b45760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601908154841015610a5657506020926111719161174a565b91905490519160031b1c8152f35b50346101915760203660031901126101915735825260036020908152918190205490516001600160a01b039091168152f35b508290346101b45760203660031901126101b4573590600954821015610a56575060079060096000520261123860ff7f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b1837f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af015493015416835192835260208301906116f0565bf35b508234610a5657602091826003193601126101b457836003926112659235815260058552205461169f565b5001805490611273826117ac565b926112808551948561178b565b82845260009182528082208185015b8484106112a35786518061032b888261160d565b60018381926112b1856119e5565b81520192019301929061128f565b8382346101b45760203660031901126101b4576112da6118a9565b3560085580f35b828434610a565780600319360112610a5657506001805490611302826117ac565b9161130f8451938461178b565b808352600082815260207fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68186015b8484106113525787518061032b898261160d565b8583819261135f856119e5565b81520192019301929061133e565b8484849261137a366115ab565b91949593929060018060a01b03871693848a5260209560028752898b205415611539575b508952600585526113b1888a205461169f565b50958a8701938560005284875289600020541561149e575b91936006880192600389019190888d898e825b88841061146b579950509850505050505050505260028252600261140286882054611713565b5093019260ff845416906007821015611458579061141f9161174a565b815490818160031b1c9160018301809311610ef757610e54948a94610e408695869586959060031b600019811b9283911b169119161790565b634e487b7160e01b885260218952602488fd5b8a610f9692610882928c8f98610f63898f8f8f908f916114939f85610f5c94610f4a92611974565b8990898f8f906113dc565b600388016114ab81611984565b50600190508981018d825b611506575b505081546000199291508281019081116110245788600052878a528c6000205554908101908111611011578b52600588018752898b2080546001600160a01b031916871790556113c9565b815481101561153457835460001981019081116110675790610b72610b6c61152e938761174a565b826114b6565b6114bb565b303b156115775763421b2d8b60e01b81528b81018690528a8160248183305af180156110d0571561139e57611570909a919a611762565b988b61139e565b8a80fd5b9181601f8401121561018c578235916001600160401b03831161018c576020808501948460051b01011161018c57565b608060031982011261018c576004356001600160a01b038116810361018c5791602435916001600160401b039160443583811161018c57826115ef9160040161157b565b9390939260643591821161018c576116099160040161157b565b9091565b602080820190808352835180925260408301928160408460051b830101950193600080925b858410611643575050505050505090565b9091929380959697603f1983820301855288519082808351928381520192019085905b808210611686575050509080600192990194019401929594939190611632565b9193806001929486518152019401920188939291611666565b6009548110156116da576007906009600052027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0190600090565b634e487b7160e01b600052603260045260246000fd5b9060078210156116fd5752565b634e487b7160e01b600052602160045260246000fd5b6001548110156116da5760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b80548210156116da5760005260206000200190600090565b6001600160401b03811161177557604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b0382111761177557604052565b6001600160401b0381116117755760051b60200190565b602080820190808352835180925260408301928160408460051b830101950193600080925b8584106117f9575050505050505090565b9091929380959697603f1983820301855288519082808351928381520192019085905b80821061183c5750505090806001929901940194019295949391906117e8565b82516001600160a01b03168452899493840193909201916001919091019061181c565b600435906001600160a01b038216820361018c57565b90815180825260208080930193019160005b828110611895575050505090565b835185529381019392810192600101611887565b6000546001600160a01b031633036118bd57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b9190820180921161190e57565b634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561190e57565b600019811461190e5760010190565b8054600160401b811015611775576119639160018201815561174a565b8154906000199060031b1b19169055565b91908110156116da5760051b0190565b8054600160401b811015611775576116099160018201815561174a565b156119a857565b60405162461bcd60e51b81526020600482015260156024820152742330b4b632b2103a37903932bbb0b932103ab9b2b960591b6044820152606490fd5b9060405191828154918282526020928383019160005283600020936000905b828210611a1c57505050611a1a9250038361178b565b565b855484526001958601958895509381019390910190611a04565b60405190608082018281106001600160401b038211176117755760405260006060838281528160208201528260408201520152565b80518210156116da5760209160051b010190565b60005b828110611a8e57505050565b606082820152602001611a82565b6001600160401b0380911690811461190e5760010190565b8115611abe570490565b634e487b7160e01b600052601260045260246000fd5b60405190604082018281106001600160401b038211176117755760405260006020838281520152565b929190611b0a8482611a6b565b51516000198082019591861161190e57611b44611b26876117ac565b94604097611b368951978861178b565b808752601f199283916117ac565b0160005b818110611e0057505060009760015b611b618688611a6b565b5151811015611bc757858103611b80575b611b7b90611937565b611b57565b98611b89611ad4565b8a8152611b9a8b610414898b611a6b565b516020820152611baa828a611a6b565b52611bb58189611a6b565b506001810180911161190e5798611b72565b509450925090949395508551926000948685019385851193845b61190e5785881015611ca15760005b88880388811161190e578a810190811161190e57811015611c835760209081611c19828e611a6b565b510151600182019081831161190e57828e91611c4a95611c398585611a6b565b51015110611c4f575b505050611937565b611bf0565b81611c5d84611c7a94611a6b565b5193611c74611c6c8484611a6b565b519183611a6b565b52611a6b565b52388c82611c42565b50919396611c949095919395611937565b9693918495939195611be1565b9450945095509593505060075492611cb8846117ac565b90611cc58751928361178b565b84825282611cd2866117ac565b01611ce1602091828501611a7f565b60005b6001600160401b0380871681831681811015611df25760009182888e5b8d8310611d1d5750505050505050611d1890611a9c565b611ce4565b8690611d28856117ac565b611d348251918261178b565b8581528d611d41876117ac565b01368c830137611d518585611a6b565b52611d5c8484611a6b565b508a8a611d7d86611d77611d708b86611a6b565b5151611713565b5061174a565b929054600393841b1c611da1575b505050505050611d9a90611937565b888e611d01565b95611ddd93819a969593611dd393611dbb8c60019b611a6b565b515160005252878060a01b0390600020541694611a6b565b5193168093611a6b565b520184811161190e579288858f388a8c611d8b565b509499505050505050505050565b602090611e0b611ad4565b82828b01015201611b48565b600180820180831161190e57811c90825b838310611e355750505090565b90919250611e4c83611e478184611ab4565b611901565b821c9190611e28565b90815181510361018c57600091825b8151841015611e9f57611e93611e9991611e47611e818786611a6b565b51611e8c8888611a6b565b5190611924565b93611937565b92611e64565b925050509056fea2646970667358221220c5045a634863a6faf072120c7ae549ad4d7254389e658881ed9f6eff11e4862a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/UserAnalytics.sol:UserAnalytics",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3864,
        "contract": "contracts/UserAnalytics.sol:UserAnalytics",
        "label": "userActivityMatrix",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
      },
      {
        "astId": 3868,
        "contract": "contracts/UserAnalytics.sol:UserAnalytics",
        "label": "addressToId",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3872,
        "contract": "contracts/UserAnalytics.sol:UserAnalytics",
        "label": "idToAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3876,
        "contract": "contracts/UserAnalytics.sol:UserAnalytics",
        "label": "consumerCredits",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3880,
        "contract": "contracts/UserAnalytics.sol:UserAnalytics",
        "label": "schemaIndex",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3882,
        "contract": "contracts/UserAnalytics.sol:UserAnalytics",
        "label": "latestIndex",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3884,
        "contract": "contracts/UserAnalytics.sol:UserAnalytics",
        "label": "totalCategories",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3886,
        "contract": "contracts/UserAnalytics.sol:UserAnalytics",
        "label": "userRewardPerDatapoint",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3939,
        "contract": "contracts/UserAnalytics.sol:UserAnalytics",
        "label": "dappAnalytics",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Analytics)3930_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_uint256)dyn_storage)dyn_storage": {
        "base": "t_array(t_uint256)dyn_storage",
        "encoding": "dynamic_array",
        "label": "uint256[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Analytics)3930_storage)dyn_storage": {
        "base": "t_struct(Analytics)3930_storage",
        "encoding": "dynamic_array",
        "label": "struct UserAnalytics.Analytics[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Category)3894": {
        "encoding": "inplace",
        "label": "enum UserAnalytics.Category",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Analytics)3930_storage": {
        "encoding": "inplace",
        "label": "struct UserAnalytics.Analytics",
        "members": [
          {
            "astId": 3907,
            "contract": "contracts/UserAnalytics.sol:UserAnalytics",
            "label": "schemaName",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 3910,
            "contract": "contracts/UserAnalytics.sol:UserAnalytics",
            "label": "columns",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3913,
            "contract": "contracts/UserAnalytics.sol:UserAnalytics",
            "label": "schemaCategory",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(Category)3894"
          },
          {
            "astId": 3917,
            "contract": "contracts/UserAnalytics.sol:UserAnalytics",
            "label": "data",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_array(t_uint256)dyn_storage)dyn_storage"
          },
          {
            "astId": 3921,
            "contract": "contracts/UserAnalytics.sol:UserAnalytics",
            "label": "addressToId",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3925,
            "contract": "contracts/UserAnalytics.sol:UserAnalytics",
            "label": "idToAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 3929,
            "contract": "contracts/UserAnalytics.sol:UserAnalytics",
            "label": "columnToIndex",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}