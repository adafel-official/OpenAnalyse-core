{
  "address": "0x57aAe2240a114106108b93Af7a8F2664E162437E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract DataLayer",
          "name": "_dataLayer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "int256[][]",
          "name": "X",
          "type": "int256[][]"
        },
        {
          "internalType": "int256[]",
          "name": "y",
          "type": "int256[]"
        },
        {
          "internalType": "int256",
          "name": "learningRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "iterations",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        }
      ],
      "name": "fit",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "trainingColIndices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "labelColIndex",
          "type": "uint256"
        },
        {
          "internalType": "int256[][]",
          "name": "testData",
          "type": "int256[][]"
        },
        {
          "internalType": "int256",
          "name": "learningRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "iterations",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        }
      ],
      "name": "getLinearRegression",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[][]",
          "name": "analyticsData",
          "type": "int256[][]"
        },
        {
          "internalType": "int256[]",
          "name": "labels",
          "type": "int256[]"
        },
        {
          "internalType": "int256[][]",
          "name": "testData",
          "type": "int256[][]"
        },
        {
          "internalType": "int256",
          "name": "learningRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "iterations",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        }
      ],
      "name": "getLinearRegressionOffChainData",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[][]",
          "name": "X",
          "type": "int256[][]"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        },
        {
          "internalType": "int256[]",
          "name": "weights",
          "type": "int256[]"
        }
      ],
      "name": "predict",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x85fa7184c066b695271724fa1b101e9a6fdea08f291cbbc1e450d092d582e438",
  "receipt": {
    "to": null,
    "from": "0x324CF97D4373ef009FDF2F1afFc58406C86899Af",
    "contractAddress": "0x57aAe2240a114106108b93Af7a8F2664E162437E",
    "transactionIndex": 0,
    "gasUsed": "27929392",
    "logsBloom": "0x
    "blockHash": "0x15a0e761e31bcf548ace2131392f01d7ed6906c76cd955cae6706ea10836d95e",
    "transactionHash": "0x85fa7184c066b695271724fa1b101e9a6fdea08f291cbbc1e450d092d582e438",
    "logs": [],
    "blockNumber": 3074311,
    "cumulativeGasUsed": "27929392",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0af59d8b00c47F5b41ee510E1c3036AA773297F3"
  ],
  "numDeployments": 1,
  "solcInputHash": "0fafca276197fdb64a4997b11c3622c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract DataLayer\",\"name\":\"_dataLayer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"int256[][]\",\"name\":\"X\",\"type\":\"int256[][]\"},{\"internalType\":\"int256[]\",\"name\":\"y\",\"type\":\"int256[]\"},{\"internalType\":\"int256\",\"name\":\"learningRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"}],\"name\":\"fit\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"trainingColIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"labelColIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256[][]\",\"name\":\"testData\",\"type\":\"int256[][]\"},{\"internalType\":\"int256\",\"name\":\"learningRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"}],\"name\":\"getLinearRegression\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[][]\",\"name\":\"analyticsData\",\"type\":\"int256[][]\"},{\"internalType\":\"int256[]\",\"name\":\"labels\",\"type\":\"int256[]\"},{\"internalType\":\"int256[][]\",\"name\":\"testData\",\"type\":\"int256[][]\"},{\"internalType\":\"int256\",\"name\":\"learningRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"}],\"name\":\"getLinearRegressionOffChainData\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[][]\",\"name\":\"X\",\"type\":\"int256[][]\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256[]\",\"name\":\"weights\",\"type\":\"int256[]\"}],\"name\":\"predict\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fit(int256[][],int256[],int256,uint256,int256)\":{\"params\":{\"X\":\"- The training features.\",\"y\":\"- The training labels.\"}},\"predict(int256[][],int256,int256[])\":{\"params\":{\"X\":\"- The input features.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fit(int256[][],int256[],int256,uint256,int256)\":{\"notice\":\"Fits the linear regression model to the training data\"},\"predict(int256[][],int256,int256[])\":{\"notice\":\"Predicts the labels for the given input data\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LinearRegression.sol\":\"LinearRegression\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DataLayer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract DataLayer is Ownable {\\n\\tuint256[][] public userActivityMatrix;\\n\\tmapping(address => uint256) public addressToId;\\n\\tmapping(uint256 => address) public idToAddress;\\n\\tmapping(address => uint256) public consumerCredits;\\n\\tmapping(bytes32 => uint256) public schemaIndex;\\n\\tuint256 public latestIndex;\\n\\tuint256 public totalCategories;\\n  uint256 public userRewardPerDatapoint;\\n\\n\\tenum Category {\\n\\t\\tGaming,\\n\\t\\tMarketplace,\\n\\t\\tDefi,\\n\\t\\tDao,\\n\\t\\tWeb3Social,\\n\\t\\tIdentity,\\n\\t\\tCertificates\\n\\t}\\n\\n  struct SchemaDetails {\\n    bytes32 schemaName;\\n\\t\\tbytes32[] columns;\\n\\t\\tCategory schemaCategory;\\n    uint256 totalRecords;\\n  }\\n\\n\\tstruct Analytics {\\n\\t\\tbytes32 schemaName;\\n\\t\\tbytes32[] columns;\\n\\t\\tCategory schemaCategory;\\n\\t\\tuint256[][] data;\\n\\t\\tmapping(address => uint256) addressToId;\\n\\t\\tmapping(uint256 => address) idToAddress;\\n\\t\\tmapping(bytes32 => uint256) columnToIndex;\\n\\t}\\n\\n\\tAnalytics[] public dappAnalytics;\\n\\n\\tconstructor() Ownable() {\\n\\t\\tuint256[] memory initialMatrix;\\n\\t\\tuserActivityMatrix.push(initialMatrix);\\n\\t\\tlatestIndex = 0;\\n\\t\\ttotalCategories = 7;\\n\\t\\tdappAnalytics.push();\\n    userRewardPerDatapoint = 10000000000000000;\\n\\t}\\n\\n\\tevent NewAnalytics(address user, address provider, uint256 category);\\n\\n\\tfunction addUser(address userAddress) external {\\n\\t\\t// get the total length of current activity matrix\\n\\t\\tlatestIndex = latestIndex + 1;\\n\\t\\tuint256[] memory initialMatrix;\\n\\t\\tuserActivityMatrix.push(initialMatrix);\\n\\n\\t\\t// add the new user details\\n\\t\\tfor (uint256 i = 0; i < totalCategories; i++) {\\n\\t\\t\\tuserActivityMatrix[latestIndex].push(0);\\n\\t\\t}\\n\\n\\t\\t// add user id to address mapping\\n\\t\\taddressToId[userAddress] = latestIndex;\\n\\t\\tidToAddress[latestIndex] = userAddress;\\n\\t}\\n\\n\\tfunction addSchema(\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tCategory category\\n\\t) external {\\n\\t\\t// Cannot have two schema with same name\\n    require(schemaIndex[schemaName] == uint256(0), \\\"SCHEMA NAME EXISTS\\\");\\n\\n    // initializing schema with defaults\\n\\t\\tAnalytics storage analytics = dappAnalytics.push();\\n\\t\\tanalytics.schemaName = schemaName;\\n\\t\\tanalytics.schemaCategory = category;\\n\\t\\t\\n    uint256[] memory initialUser;\\n\\t\\tanalytics.data.push(initialUser);\\n\\t\\t\\n    for (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tanalytics.data[0].push(0);\\n\\t\\t\\tanalytics.columns.push(columns[i]);\\n\\t\\t\\tanalytics.columnToIndex[columns[i]] = i;\\n\\t\\t}\\n\\n\\t\\t// adding to schema index map\\n\\t\\tschemaIndex[schemaName] = dappAnalytics.length - 1;\\n\\t}\\n\\n\\tfunction addAnalytics(\\n\\t\\taddress payable userAddress,\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tuint256[] calldata data\\n\\t) public payable {\\n\\t\\trequire(schemaIndex[schemaName] != 0, \\\"SCHEMA NOT PRESENT\\\");\\n\\n\\t\\t// add user if not already present\\n\\t\\tif (addressToId[userAddress] == 0) {\\n\\t\\t\\tthis.addUser(userAddress);\\n\\t\\t}\\n\\n\\t\\t// retrieve storage instance\\n\\t\\tAnalytics storage schemaAnalytics = dappAnalytics[\\n\\t\\t\\tschemaIndex[schemaName]\\n\\t\\t];\\n\\n\\t\\t// push new user if not already present\\n\\t\\tif (schemaAnalytics.addressToId[userAddress] == 0) {\\n\\t\\t\\tschemaAnalytics.data.push();\\n\\t\\t\\tfor (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\\n\\t\\t\\t\\tschemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\\n\\t\\t\\t}\\n\\n\\t\\t\\tschemaAnalytics.addressToId[userAddress] =\\n\\t\\t\\t\\tschemaAnalytics.data.length -\\n\\t\\t\\t\\t1;\\n\\t\\t\\tschemaAnalytics.idToAddress[\\n\\t\\t\\t\\tschemaAnalytics.data.length - 1\\n\\t\\t\\t] = userAddress;\\n\\t\\t}\\n\\n\\t\\t// add to the existing data\\n\\t\\tfor (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tschemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\\n\\t\\t\\t\\tschemaAnalytics.columnToIndex[columns[i]]\\n\\t\\t\\t] += data[i];\\n\\t\\t}\\n\\n\\t\\tuserActivityMatrix[addressToId[userAddress]][\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t] += 1;\\n\\n\\t\\t// rewarding the users for sharing data\\n\\t\\tbool sent = userAddress.send(userRewardPerDatapoint);\\n\\t\\trequire(sent, \\\"Failed to reward user\\\");\\n\\n\\t\\t// increasing credit limit for provider\\n\\t\\tconsumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\\n\\n\\t\\temit NewAnalytics(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction updateAnalytics(\\n\\t\\taddress payable userAddress,\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tuint256[] calldata data\\n\\t) public payable {\\n\\t\\t// add user if not already present\\n\\t\\tif (addressToId[userAddress] == 0) {\\n\\t\\t\\tthis.addUser(userAddress);\\n\\t\\t}\\n\\n\\t\\t// retrieve storage instance\\n\\t\\tAnalytics storage schemaAnalytics = dappAnalytics[\\n\\t\\t\\tschemaIndex[schemaName]\\n\\t\\t];\\n\\n\\t\\t// push new user if not already present\\n\\t\\tif (schemaAnalytics.addressToId[userAddress] == 0) {\\n\\t\\t\\tschemaAnalytics.data.push();\\n\\t\\t\\tfor (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\\n\\t\\t\\t\\tschemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\\n\\t\\t\\t}\\n\\n\\t\\t\\tschemaAnalytics.addressToId[userAddress] =\\n\\t\\t\\t\\tschemaAnalytics.data.length -\\n\\t\\t\\t\\t1;\\n\\t\\t\\tschemaAnalytics.idToAddress[\\n\\t\\t\\t\\tschemaAnalytics.data.length - 1\\n\\t\\t\\t] = userAddress;\\n\\t\\t}\\n\\n\\t\\t// replace the existing user data with new one\\n\\t\\tfor (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tschemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\\n\\t\\t\\t\\tschemaAnalytics.columnToIndex[columns[i]]\\n\\t\\t\\t] = data[i];\\n\\t\\t}\\n\\n\\t\\tuserActivityMatrix[addressToId[userAddress]][\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t] += 1;\\n\\n\\t\\t// rewarding the users for sharing data\\n\\t\\tbool sent = userAddress.send(userRewardPerDatapoint);\\n\\t\\trequire(sent, \\\"Failed to reward user\\\");\\n\\n\\t\\t// increasing credit limit for provider\\n\\t\\tconsumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\\n\\n\\t\\temit NewAnalytics(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t);\\n\\t}\\n\\n  function updateUserReward(uint256 newReward) external onlyOwner {\\n    userRewardPerDatapoint = newReward;\\n  }\\n\\n\\tfunction getUserActivityMatrix()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[][] memory)\\n\\t{\\n\\t\\treturn userActivityMatrix;\\n\\t}\\n\\n  function getAllSchemas() external view returns (SchemaDetails[] memory) {\\n    SchemaDetails[] memory schemaDetails = new SchemaDetails[](dappAnalytics.length - 1);\\n    for (uint256 i = 1; i < dappAnalytics.length; i++) {\\n      // bytes32[] memory schemaColumns = new bytes32[](dappAnalytics[i].columns.length);\\n      SchemaDetails memory schemaDetail;\\n      schemaDetail.schemaName = dappAnalytics[i].schemaName;\\n      schemaDetail.columns = dappAnalytics[i].columns;\\n      schemaDetail.schemaCategory = dappAnalytics[i].schemaCategory;\\n      schemaDetail.totalRecords = dappAnalytics[i].data.length;\\n      schemaDetails[i - 1] = schemaDetail;\\n    }\\n\\n    return schemaDetails;\\n  }\\n\\n\\tfunction getAnalyticsDataBySchemaName(\\n\\t\\tbytes32 schemaName\\n\\t) external view returns (uint256[][] memory) {\\n\\t\\treturn dappAnalytics[schemaIndex[schemaName]].data;\\n\\t}\\n\\n\\tfunction getColumnsOfSchema(\\n\\t\\tbytes32 schemaName\\n\\t) external view returns (bytes32[] memory) {\\n\\t\\treturn dappAnalytics[schemaIndex[schemaName]].columns;\\n\\t}\\n\\n  function getSchemaAddressToId(\\n    bytes32 schemaName,\\n    address userAddress\\n  ) external view returns (uint256) {\\n    return dappAnalytics[schemaIndex[schemaName]].addressToId[userAddress];\\n  }\\n\\n  function getSchemaIdToAddress(\\n    bytes32 schemaName,\\n    uint256 userId\\n  ) external view returns (address) {\\n    return dappAnalytics[schemaIndex[schemaName]].idToAddress[userId];\\n  }\\n\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0x018bc280bd319aeeb71d64238d8876969c7b42663df00fff356b1d02692d4b51\",\"license\":\"MIT\"},\"contracts/LinearRegression.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./DataLayer.sol\\\";\\n\\ncontract LinearRegression {\\n\\tDataLayer dataLayer;\\n\\n\\tint256 constant FIXED_POINT = 1e9; // Scaling factor for fixed-point arithmetic\\n\\n\\tconstructor(DataLayer _dataLayer) {\\n\\t\\tdataLayer = _dataLayer;\\n\\t}\\n\\n  // Get linear regression for onchain schema data\\n\\tfunction getLinearRegression(\\n\\t\\tbytes32 schemaName,\\n    uint256[] memory trainingColIndices,\\n\\t\\tuint256 labelColIndex,\\n    int256[][] memory testData,\\n\\t\\tint256 learningRate,\\n\\t\\tuint256 iterations,\\n\\t\\tint256 bias\\n\\t) public view returns (int256[] memory) {\\n\\t\\tuint256[][] memory analyticsData = dataLayer\\n\\t\\t\\t.getAnalyticsDataBySchemaName(schemaName);\\n\\n    int256[][] memory trainingData = new int256[][](analyticsData.length);\\n\\n\\t\\tint256[] memory labels = new int256[](analyticsData.length);\\n\\n    trainingData[0] = new int256[](trainingColIndices.length);\\n\\n\\t\\tfor (uint256 i = 1; i < analyticsData.length; i++) {\\n      trainingData[i] = new int256[](trainingColIndices.length);\\n\\t\\t\\tlabels[i] = int256(analyticsData[i][labelColIndex]) * FIXED_POINT;\\n\\n      for (uint256 j = 0; j < trainingColIndices.length; j++) {\\n        trainingData[i][j] = int256(analyticsData[i][trainingColIndices[j]]) * FIXED_POINT;\\n      }\\n\\t\\t}\\n\\n\\t\\tint256[] memory weights = fit(\\n\\t\\t\\ttrainingData,\\n\\t\\t\\tlabels,\\n\\t\\t\\tlearningRate,\\n\\t\\t\\titerations,\\n\\t\\t\\tbias\\n\\t\\t);\\n\\n\\t\\tint256[] memory predictions = predict(testData, bias, weights);\\n\\n\\t\\treturn predictions;\\n\\t}\\n\\n  // Get linear regression for offchain data\\n  function getLinearRegressionOffChainData(\\n\\t\\tint256[][] memory analyticsData,\\n\\t\\tint256[] memory labels,\\n\\t\\tint256[][] memory testData,\\n\\t\\tint256 learningRate,\\n\\t\\tuint256 iterations,\\n\\t\\tint256 bias\\n\\t) public pure returns (int256[] memory) {\\n\\t\\t\\n\\n\\t\\tint256[] memory weights = fit(\\n\\t\\t\\tanalyticsData,\\n\\t\\t\\tlabels,\\n\\t\\t\\tlearningRate,\\n\\t\\t\\titerations,\\n\\t\\t\\tbias\\n\\t\\t);\\n\\n\\t\\tint256[] memory predictions = predict(testData, bias, weights);\\n\\n\\t\\treturn predictions;\\n\\t}\\n\\n\\n\\t/**\\n\\t * Fits the linear regression model to the training data\\n\\t * @param X - The training features.\\n\\t * @param y - The training labels.\\n\\t */\\n\\tfunction fit(\\n\\t\\tint256[][] memory X,\\n\\t\\tint256[] memory y,\\n\\t\\tint256 learningRate,\\n\\t\\tuint256 iterations,\\n\\t\\tint256 bias\\n\\t) public pure returns (int256[] memory) {\\n\\t\\trequire(\\n\\t\\t\\tX.length == y.length,\\n\\t\\t\\t\\\"Feature and label arrays must have the same length.\\\"\\n\\t\\t);\\n\\n\\t\\t// Initialize weights\\n\\t\\tint256[] memory weights = new int256[](X[0].length);\\n  \\n\\t\\tfor (uint256 iter = 0; iter < iterations; iter++) {\\n\\t\\t\\tint256[] memory predictions = new int256[](X.length);\\n\\t\\t\\tint256[] memory dw = new int256[](X[0].length);\\n\\t\\t\\tint256 db = 0;\\n\\n\\t\\t\\t// Compute predictions\\n\\t\\t\\tfor (uint256 i = 1; i < X.length; i++) {\\n\\t\\t\\t\\tint256 linearModel = bias;\\n\\t\\t\\t\\tfor (uint256 j = 0; j < X[0].length; j++) {\\n\\t\\t\\t\\t\\tlinearModel += (weights[j] * X[i][j]) / FIXED_POINT;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tpredictions[i] = linearModel;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Compute gradients\\n\\t\\t\\tfor (uint256 i = 1; i < X.length; i++) {\\n\\t\\t\\t\\tint256 error = predictions[i] - y[i];\\n\\t\\t\\t\\tfor (uint256 j = 0; j < X[0].length; j++) {\\n\\t\\t\\t\\t\\tdw[j] += (X[i][j] * error) / (int256(X.length) * FIXED_POINT);\\n\\t\\t\\t\\t}\\n        \\n\\t\\t\\t\\tdb += error / int256(X.length);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Update weights and bias\\n\\t\\t\\tfor (uint256 j = 0; j < X[0].length; j++) {\\n\\t\\t\\t\\tweights[j] -= (learningRate * dw[j]) / FIXED_POINT;\\n\\t\\t\\t}\\n\\t\\t\\tbias -= (learningRate * db) / FIXED_POINT;\\n\\t\\t}\\n\\n\\t\\treturn weights;\\n\\t}\\n\\n\\t/**\\n\\t * Predicts the labels for the given input data\\n\\t * @param X - The input features.\\n\\t */\\n\\tfunction predict(\\n\\t\\tint256[][] memory X,\\n\\t\\tint256 bias,\\n\\t\\tint256[] memory weights\\n\\t) public pure returns (int256[] memory) {\\n\\t\\tuint256 m = X.length;\\n\\t\\tint256[] memory predictions = new int256[](m);\\n\\n\\t\\tfor (uint256 i = 0; i < m; i++) {\\n\\t\\t\\tint256 linearModel = bias;\\n\\t\\t\\tfor (uint256 j = 0; j < X[0].length; j++) {\\n\\t\\t\\t\\tlinearModel += (weights[j] * X[i][j]) / FIXED_POINT;\\n\\t\\t\\t}\\n\\t\\t\\tpredictions[i] = linearModel;\\n\\t\\t}\\n\\n\\t\\treturn predictions;\\n\\t}\\n}\\n\",\"keccak256\":\"0xefde169aa1bb27cc15e132fcdf0eff708eed402a7f638f67d98981938266d557\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461007457601f610bd538819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600080546001600160a01b031916919091179055604051610b4590816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040815260c06040526004908136101561001a57600080fd5b600091823560e01c806330eba3ba146101b6578063ac9126a31461015b578063c9b76701146100ce5763e689266d1461005257600080fd5b346100ca5760a03660031901126100ca5767ffffffffffffffff81358181116100c65761008290369084016105da565b936024359182116100c35750926100a26100b3926100bf95369101610577565b6084359160643591604435916107c6565b9051519182918261065b565b0390f35b80fd5b8480fd5b8280fd5b5091346100c35760c03660031901126100c35767ffffffffffffffff9280358481116100ca5761010190369083016105da565b93602435818111610157576101199036908401610577565b926044359182116100c357509161015161013d6100bf96936100b3953691016105da565b9260a43592839160843591606435916107c6565b91610a79565b8380fd5b50346100ca5760603660031901126100ca5767ffffffffffffffff81358181116100c65761018c90369084016105da565b936044359182116100c35750926101ac6100b3926100bf95369101610577565b9060243590610a79565b50346100ca5760e03660031901126100ca5767ffffffffffffffff906024358281116100c657366023820112156100c65780820135946101f58661055f565b926102038651519485610527565b86845260a092602084526020850160246005998a1b830101913683116100c657602401905b828210610517575050506064358581116100ca5761024990369083016105da565b9460c435978360018060a01b038154169360248a515180968193630596815760e21b83528035908301525afa92831561050c578493610402575b505050928351926102938461055f565b936102a18851519586610527565b8085526102b0601f199161055f565b0190835b8281106103ef575050506102c88451610696565b936102d38251610696565b6102dc856106c8565b526102e6846106c8565b5060019260443584805b610311575b6100bf8a6100b38b8e610151818e8e60a43591608435916107c6565b83518110156103ea57908493929161032a879651610696565b610334828a6106eb565b5261033f81896106eb565b5061035d6103578361035184886106eb565b516106eb565b51610724565b610367828b6106eb565b5282865b610384575b5061037a906106ff565b90919293946102f0565b8886979293949596518210156103dd57906103d1916103cb82610351876103c56103578e6103be8f6103b78689926106eb565b51926106eb565b51906106eb565b946106eb565b526106ff565b8196959493929161036b565b5095949392919095610370565b6102f5565b81516060878301909101528151016102b4565b909192503d8085833e6104158183610527565b8101908551818303126100c65780519084821161050857019181601f840112156100c6578251916104458361055f565b946104538b51519687610527565b8386528751948580880195851b82010195838711610504578101945b8686106104855750505050505050388080610283565b855183811161050057820184603f82011215610500578a51810151908e6104ab8361055f565b926104b98251519485610527565b8084528d518401915180918a1b840101928884116104fc5701905b8282106104ec5750505081528951958601950161046f565b815181528d5191820191016104d4565b8d80fd5b8980fd5b8880fd5b8580fd5b8851513d86823e3d90fd5b8135815285519182019101610228565b90601f8019910116810190811067ffffffffffffffff82111761054957604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116105495760051b60200190565b81601f820112156105d55780359161058e8361055f565b9261059c6040519485610527565b808452602092838086019260051b8201019283116105d5578301905b8282106105c6575050505090565b813581529083019083016105b8565b600080fd5b9080601f830112156105d5578135906105f28261055f565b926106006040519485610527565b828452602092838086019160051b830101928084116105d557848301915b84831061062e5750505050505090565b823567ffffffffffffffff81116105d557869161065084848094890101610577565b81520192019161061e565b6020908160408183019282815285518094520193019160005b828110610682575050505090565b835185529381019392810192600101610674565b906106a08261055f565b6106ad6040519182610527565b82815280926106be601f199161055f565b0190602036910137565b8051156106d55760200190565b634e487b7160e01b600052603260045260246000fd5b80518210156106d55760209160051b010190565b600019811461070e5760010190565b634e487b7160e01b600052601160045260246000fd5b90633b9aca009182810292818405149015171561070e57565b818102929160008212600160ff1b82141661070e57818405149015171561070e57565b811561077b57600160ff1b811460001983141661070e570590565b634e487b7160e01b600052601260045260246000fd5b9190916000838201938412911290801582169115161761070e57565b8181039291600013801582851316918412161761070e57565b90928151845103610a18576107e76107e0839695966106c8565b5151610696565b9460005b8281106107fb5750505050505090565b6108088498939851610696565b956108156107e0866106c8565b6000936001955b87518710156108ae57878b8b9c9d869c999a9b9c9389945b61083d856106c8565b515186101561088a5761087e61088491633b9aca008f610877906108708b610351610868828d6106eb565b51938d6106eb565b519061073d565b0590610791565b956106ff565b94610834565b925094996108a194508b93509a6103cb919b6106eb565b95909a999897969a61081c565b979198929499909395509995996001965b8b5188101561098857908392916108ee6108dc8a8f9998976106eb565b516108e78b886106eb565b51906107ad565b9960005b6108fb896106c8565b515181101561095957808d6103cb828f8f8e61093861093161094e9461092b6109549b61035161093e97876106eb565b5161073d565b9151610724565b90610760565b61094883866106eb565b51610791565b926106eb565b6108f2565b50989b610974610980939b61097a9395969798995190610760565b90610791565b9a6106ff565b9697906108bf565b93919a99949596509796915060005b6109a08a6106c8565b51518110156109e357806109d4633b9aca006109c38e6108706109de968e6106eb565b056109ce838d6106eb565b516107ad565b6103cb828c6106eb565b610997565b5096979492610a0a9199965093633b9aca00610a03610a1094968961073d565b05906107ad565b916106ff565b9490946107eb565b60405162461bcd60e51b815260206004820152603360248201527f4665617475726520616e64206c6162656c20617272617973206d7573742068616044820152723b32903a34329039b0b6b2903632b733ba341760691b6064820152608490fd5b9190825192610a8784610696565b93600090815b818310610a9d5750505050505090565b849597919293949281935b610ab1876106c8565b5151851015610af057610ae4610aea91633b9aca006108778a6108708f6103518d610add8e80946106eb565b51946106eb565b946106ff565b93610aa8565b610b07929695919450989692986103cb828a6106eb565b919093610a8d56fea264697066735822122011f3dd8fb7c49a46bc8f765ceb5dc2129961de7ab099cad99a187919a8c6517f64736f6c63430008110033",
  "deployedBytecode": "0x60806040815260c06040526004908136101561001a57600080fd5b600091823560e01c806330eba3ba146101b6578063ac9126a31461015b578063c9b76701146100ce5763e689266d1461005257600080fd5b346100ca5760a03660031901126100ca5767ffffffffffffffff81358181116100c65761008290369084016105da565b936024359182116100c35750926100a26100b3926100bf95369101610577565b6084359160643591604435916107c6565b9051519182918261065b565b0390f35b80fd5b8480fd5b8280fd5b5091346100c35760c03660031901126100c35767ffffffffffffffff9280358481116100ca5761010190369083016105da565b93602435818111610157576101199036908401610577565b926044359182116100c357509161015161013d6100bf96936100b3953691016105da565b9260a43592839160843591606435916107c6565b91610a79565b8380fd5b50346100ca5760603660031901126100ca5767ffffffffffffffff81358181116100c65761018c90369084016105da565b936044359182116100c35750926101ac6100b3926100bf95369101610577565b9060243590610a79565b50346100ca5760e03660031901126100ca5767ffffffffffffffff906024358281116100c657366023820112156100c65780820135946101f58661055f565b926102038651519485610527565b86845260a092602084526020850160246005998a1b830101913683116100c657602401905b828210610517575050506064358581116100ca5761024990369083016105da565b9460c435978360018060a01b038154169360248a515180968193630596815760e21b83528035908301525afa92831561050c578493610402575b505050928351926102938461055f565b936102a18851519586610527565b8085526102b0601f199161055f565b0190835b8281106103ef575050506102c88451610696565b936102d38251610696565b6102dc856106c8565b526102e6846106c8565b5060019260443584805b610311575b6100bf8a6100b38b8e610151818e8e60a43591608435916107c6565b83518110156103ea57908493929161032a879651610696565b610334828a6106eb565b5261033f81896106eb565b5061035d6103578361035184886106eb565b516106eb565b51610724565b610367828b6106eb565b5282865b610384575b5061037a906106ff565b90919293946102f0565b8886979293949596518210156103dd57906103d1916103cb82610351876103c56103578e6103be8f6103b78689926106eb565b51926106eb565b51906106eb565b946106eb565b526106ff565b8196959493929161036b565b5095949392919095610370565b6102f5565b81516060878301909101528151016102b4565b909192503d8085833e6104158183610527565b8101908551818303126100c65780519084821161050857019181601f840112156100c6578251916104458361055f565b946104538b51519687610527565b8386528751948580880195851b82010195838711610504578101945b8686106104855750505050505050388080610283565b855183811161050057820184603f82011215610500578a51810151908e6104ab8361055f565b926104b98251519485610527565b8084528d518401915180918a1b840101928884116104fc5701905b8282106104ec5750505081528951958601950161046f565b815181528d5191820191016104d4565b8d80fd5b8980fd5b8880fd5b8580fd5b8851513d86823e3d90fd5b8135815285519182019101610228565b90601f8019910116810190811067ffffffffffffffff82111761054957604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116105495760051b60200190565b81601f820112156105d55780359161058e8361055f565b9261059c6040519485610527565b808452602092838086019260051b8201019283116105d5578301905b8282106105c6575050505090565b813581529083019083016105b8565b600080fd5b9080601f830112156105d5578135906105f28261055f565b926106006040519485610527565b828452602092838086019160051b830101928084116105d557848301915b84831061062e5750505050505090565b823567ffffffffffffffff81116105d557869161065084848094890101610577565b81520192019161061e565b6020908160408183019282815285518094520193019160005b828110610682575050505090565b835185529381019392810192600101610674565b906106a08261055f565b6106ad6040519182610527565b82815280926106be601f199161055f565b0190602036910137565b8051156106d55760200190565b634e487b7160e01b600052603260045260246000fd5b80518210156106d55760209160051b010190565b600019811461070e5760010190565b634e487b7160e01b600052601160045260246000fd5b90633b9aca009182810292818405149015171561070e57565b818102929160008212600160ff1b82141661070e57818405149015171561070e57565b811561077b57600160ff1b811460001983141661070e570590565b634e487b7160e01b600052601260045260246000fd5b9190916000838201938412911290801582169115161761070e57565b8181039291600013801582851316918412161761070e57565b90928151845103610a18576107e76107e0839695966106c8565b5151610696565b9460005b8281106107fb5750505050505090565b6108088498939851610696565b956108156107e0866106c8565b6000936001955b87518710156108ae57878b8b9c9d869c999a9b9c9389945b61083d856106c8565b515186101561088a5761087e61088491633b9aca008f610877906108708b610351610868828d6106eb565b51938d6106eb565b519061073d565b0590610791565b956106ff565b94610834565b925094996108a194508b93509a6103cb919b6106eb565b95909a999897969a61081c565b979198929499909395509995996001965b8b5188101561098857908392916108ee6108dc8a8f9998976106eb565b516108e78b886106eb565b51906107ad565b9960005b6108fb896106c8565b515181101561095957808d6103cb828f8f8e61093861093161094e9461092b6109549b61035161093e97876106eb565b5161073d565b9151610724565b90610760565b61094883866106eb565b51610791565b926106eb565b6108f2565b50989b610974610980939b61097a9395969798995190610760565b90610791565b9a6106ff565b9697906108bf565b93919a99949596509796915060005b6109a08a6106c8565b51518110156109e357806109d4633b9aca006109c38e6108706109de968e6106eb565b056109ce838d6106eb565b516107ad565b6103cb828c6106eb565b610997565b5096979492610a0a9199965093633b9aca00610a03610a1094968961073d565b05906107ad565b916106ff565b9490946107eb565b60405162461bcd60e51b815260206004820152603360248201527f4665617475726520616e64206c6162656c20617272617973206d7573742068616044820152723b32903a34329039b0b6b2903632b733ba341760691b6064820152608490fd5b9190825192610a8784610696565b93600090815b818310610a9d5750505050505090565b849597919293949281935b610ab1876106c8565b5151851015610af057610ae4610aea91633b9aca006108778a6108708f6103518d610add8e80946106eb565b51946106eb565b946106ff565b93610aa8565b610b07929695919450989692986103cb828a6106eb565b919093610a8d56fea264697066735822122011f3dd8fb7c49a46bc8f765ceb5dc2129961de7ab099cad99a187919a8c6517f64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "fit(int256[][],int256[],int256,uint256,int256)": {
        "params": {
          "X": "- The training features.",
          "y": "- The training labels."
        }
      },
      "predict(int256[][],int256,int256[])": {
        "params": {
          "X": "- The input features."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fit(int256[][],int256[],int256,uint256,int256)": {
        "notice": "Fits the linear regression model to the training data"
      },
      "predict(int256[][],int256,int256[])": {
        "notice": "Predicts the labels for the given input data"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2595,
        "contract": "contracts/LinearRegression.sol:LinearRegression",
        "label": "dataLayer",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(DataLayer)1579"
      }
    ],
    "types": {
      "t_contract(DataLayer)1579": {
        "encoding": "inplace",
        "label": "contract DataLayer",
        "numberOfBytes": "20"
      }
    }
  }
}