{
  "address": "0xefEB79d2016Ddc9c18c60df1923B7500C262c71F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract DataLayer",
          "name": "_dataLayer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "int256[][]",
          "name": "X",
          "type": "int256[][]"
        },
        {
          "internalType": "int256[]",
          "name": "y",
          "type": "int256[]"
        },
        {
          "internalType": "int256",
          "name": "learningRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "iterations",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        }
      ],
      "name": "fit",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "schemaName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "trainingColIndices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "labelColIndex",
          "type": "uint256"
        },
        {
          "internalType": "int256[][]",
          "name": "testData",
          "type": "int256[][]"
        },
        {
          "internalType": "int256",
          "name": "learningRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "iterations",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        }
      ],
      "name": "getLogisticRegression",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[][]",
          "name": "analyticsData",
          "type": "int256[][]"
        },
        {
          "internalType": "int256[]",
          "name": "labels",
          "type": "int256[]"
        },
        {
          "internalType": "int256[][]",
          "name": "testData",
          "type": "int256[][]"
        },
        {
          "internalType": "int256",
          "name": "learningRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "iterations",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        }
      ],
      "name": "getLogisticRegressionOffChainData",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[][]",
          "name": "X",
          "type": "int256[][]"
        },
        {
          "internalType": "int256[]",
          "name": "weights",
          "type": "int256[]"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        }
      ],
      "name": "predict",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a23cc24790c0395881777b5e91b2f3dd4f71d178ed6c8c72b7426930697f14b",
  "receipt": {
    "to": null,
    "from": "0x324CF97D4373ef009FDF2F1afFc58406C86899Af",
    "contractAddress": "0xefEB79d2016Ddc9c18c60df1923B7500C262c71F",
    "transactionIndex": 0,
    "gasUsed": "29869545",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf761278054fd567232a1b7b7c03a91991ae6398d177c7cb775cd42d2d2ddb8d6",
    "transactionHash": "0x3a23cc24790c0395881777b5e91b2f3dd4f71d178ed6c8c72b7426930697f14b",
    "logs": [],
    "blockNumber": 3074316,
    "cumulativeGasUsed": "29869545",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0af59d8b00c47F5b41ee510E1c3036AA773297F3"
  ],
  "numDeployments": 1,
  "solcInputHash": "0fafca276197fdb64a4997b11c3622c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract DataLayer\",\"name\":\"_dataLayer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"int256[][]\",\"name\":\"X\",\"type\":\"int256[][]\"},{\"internalType\":\"int256[]\",\"name\":\"y\",\"type\":\"int256[]\"},{\"internalType\":\"int256\",\"name\":\"learningRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"}],\"name\":\"fit\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schemaName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"trainingColIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"labelColIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256[][]\",\"name\":\"testData\",\"type\":\"int256[][]\"},{\"internalType\":\"int256\",\"name\":\"learningRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"}],\"name\":\"getLogisticRegression\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[][]\",\"name\":\"analyticsData\",\"type\":\"int256[][]\"},{\"internalType\":\"int256[]\",\"name\":\"labels\",\"type\":\"int256[]\"},{\"internalType\":\"int256[][]\",\"name\":\"testData\",\"type\":\"int256[][]\"},{\"internalType\":\"int256\",\"name\":\"learningRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"}],\"name\":\"getLogisticRegressionOffChainData\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[][]\",\"name\":\"X\",\"type\":\"int256[][]\"},{\"internalType\":\"int256[]\",\"name\":\"weights\",\"type\":\"int256[]\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"}],\"name\":\"predict\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fit(int256[][],int256[],int256,uint256,int256)\":{\"params\":{\"X\":\"- The training features.\",\"y\":\"- The training labels.\"}},\"predict(int256[][],int256[],int256)\":{\"params\":{\"X\":\"- The input features.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fit(int256[][],int256[],int256,uint256,int256)\":{\"notice\":\"Fits the logistic regression model to the training data\"},\"predict(int256[][],int256[],int256)\":{\"notice\":\"Predicts the labels for the given input data\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LogisticRegression.sol\":\"LogisticRegression\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DataLayer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract DataLayer is Ownable {\\n\\tuint256[][] public userActivityMatrix;\\n\\tmapping(address => uint256) public addressToId;\\n\\tmapping(uint256 => address) public idToAddress;\\n\\tmapping(address => uint256) public consumerCredits;\\n\\tmapping(bytes32 => uint256) public schemaIndex;\\n\\tuint256 public latestIndex;\\n\\tuint256 public totalCategories;\\n  uint256 public userRewardPerDatapoint;\\n\\n\\tenum Category {\\n\\t\\tGaming,\\n\\t\\tMarketplace,\\n\\t\\tDefi,\\n\\t\\tDao,\\n\\t\\tWeb3Social,\\n\\t\\tIdentity,\\n\\t\\tCertificates\\n\\t}\\n\\n  struct SchemaDetails {\\n    bytes32 schemaName;\\n\\t\\tbytes32[] columns;\\n\\t\\tCategory schemaCategory;\\n    uint256 totalRecords;\\n  }\\n\\n\\tstruct Analytics {\\n\\t\\tbytes32 schemaName;\\n\\t\\tbytes32[] columns;\\n\\t\\tCategory schemaCategory;\\n\\t\\tuint256[][] data;\\n\\t\\tmapping(address => uint256) addressToId;\\n\\t\\tmapping(uint256 => address) idToAddress;\\n\\t\\tmapping(bytes32 => uint256) columnToIndex;\\n\\t}\\n\\n\\tAnalytics[] public dappAnalytics;\\n\\n\\tconstructor() Ownable() {\\n\\t\\tuint256[] memory initialMatrix;\\n\\t\\tuserActivityMatrix.push(initialMatrix);\\n\\t\\tlatestIndex = 0;\\n\\t\\ttotalCategories = 7;\\n\\t\\tdappAnalytics.push();\\n    userRewardPerDatapoint = 10000000000000000;\\n\\t}\\n\\n\\tevent NewAnalytics(address user, address provider, uint256 category);\\n\\n\\tfunction addUser(address userAddress) external {\\n\\t\\t// get the total length of current activity matrix\\n\\t\\tlatestIndex = latestIndex + 1;\\n\\t\\tuint256[] memory initialMatrix;\\n\\t\\tuserActivityMatrix.push(initialMatrix);\\n\\n\\t\\t// add the new user details\\n\\t\\tfor (uint256 i = 0; i < totalCategories; i++) {\\n\\t\\t\\tuserActivityMatrix[latestIndex].push(0);\\n\\t\\t}\\n\\n\\t\\t// add user id to address mapping\\n\\t\\taddressToId[userAddress] = latestIndex;\\n\\t\\tidToAddress[latestIndex] = userAddress;\\n\\t}\\n\\n\\tfunction addSchema(\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tCategory category\\n\\t) external {\\n\\t\\t// Cannot have two schema with same name\\n    require(schemaIndex[schemaName] == uint256(0), \\\"SCHEMA NAME EXISTS\\\");\\n\\n    // initializing schema with defaults\\n\\t\\tAnalytics storage analytics = dappAnalytics.push();\\n\\t\\tanalytics.schemaName = schemaName;\\n\\t\\tanalytics.schemaCategory = category;\\n\\t\\t\\n    uint256[] memory initialUser;\\n\\t\\tanalytics.data.push(initialUser);\\n\\t\\t\\n    for (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tanalytics.data[0].push(0);\\n\\t\\t\\tanalytics.columns.push(columns[i]);\\n\\t\\t\\tanalytics.columnToIndex[columns[i]] = i;\\n\\t\\t}\\n\\n\\t\\t// adding to schema index map\\n\\t\\tschemaIndex[schemaName] = dappAnalytics.length - 1;\\n\\t}\\n\\n\\tfunction addAnalytics(\\n\\t\\taddress payable userAddress,\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tuint256[] calldata data\\n\\t) public payable {\\n\\t\\trequire(schemaIndex[schemaName] != 0, \\\"SCHEMA NOT PRESENT\\\");\\n\\n\\t\\t// add user if not already present\\n\\t\\tif (addressToId[userAddress] == 0) {\\n\\t\\t\\tthis.addUser(userAddress);\\n\\t\\t}\\n\\n\\t\\t// retrieve storage instance\\n\\t\\tAnalytics storage schemaAnalytics = dappAnalytics[\\n\\t\\t\\tschemaIndex[schemaName]\\n\\t\\t];\\n\\n\\t\\t// push new user if not already present\\n\\t\\tif (schemaAnalytics.addressToId[userAddress] == 0) {\\n\\t\\t\\tschemaAnalytics.data.push();\\n\\t\\t\\tfor (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\\n\\t\\t\\t\\tschemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\\n\\t\\t\\t}\\n\\n\\t\\t\\tschemaAnalytics.addressToId[userAddress] =\\n\\t\\t\\t\\tschemaAnalytics.data.length -\\n\\t\\t\\t\\t1;\\n\\t\\t\\tschemaAnalytics.idToAddress[\\n\\t\\t\\t\\tschemaAnalytics.data.length - 1\\n\\t\\t\\t] = userAddress;\\n\\t\\t}\\n\\n\\t\\t// add to the existing data\\n\\t\\tfor (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tschemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\\n\\t\\t\\t\\tschemaAnalytics.columnToIndex[columns[i]]\\n\\t\\t\\t] += data[i];\\n\\t\\t}\\n\\n\\t\\tuserActivityMatrix[addressToId[userAddress]][\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t] += 1;\\n\\n\\t\\t// rewarding the users for sharing data\\n\\t\\tbool sent = userAddress.send(userRewardPerDatapoint);\\n\\t\\trequire(sent, \\\"Failed to reward user\\\");\\n\\n\\t\\t// increasing credit limit for provider\\n\\t\\tconsumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\\n\\n\\t\\temit NewAnalytics(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction updateAnalytics(\\n\\t\\taddress payable userAddress,\\n\\t\\tbytes32 schemaName,\\n\\t\\tbytes32[] calldata columns,\\n\\t\\tuint256[] calldata data\\n\\t) public payable {\\n\\t\\t// add user if not already present\\n\\t\\tif (addressToId[userAddress] == 0) {\\n\\t\\t\\tthis.addUser(userAddress);\\n\\t\\t}\\n\\n\\t\\t// retrieve storage instance\\n\\t\\tAnalytics storage schemaAnalytics = dappAnalytics[\\n\\t\\t\\tschemaIndex[schemaName]\\n\\t\\t];\\n\\n\\t\\t// push new user if not already present\\n\\t\\tif (schemaAnalytics.addressToId[userAddress] == 0) {\\n\\t\\t\\tschemaAnalytics.data.push();\\n\\t\\t\\tfor (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\\n\\t\\t\\t\\tschemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\\n\\t\\t\\t}\\n\\n\\t\\t\\tschemaAnalytics.addressToId[userAddress] =\\n\\t\\t\\t\\tschemaAnalytics.data.length -\\n\\t\\t\\t\\t1;\\n\\t\\t\\tschemaAnalytics.idToAddress[\\n\\t\\t\\t\\tschemaAnalytics.data.length - 1\\n\\t\\t\\t] = userAddress;\\n\\t\\t}\\n\\n\\t\\t// replace the existing user data with new one\\n\\t\\tfor (uint256 i = 0; i < columns.length; i++) {\\n\\t\\t\\tschemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\\n\\t\\t\\t\\tschemaAnalytics.columnToIndex[columns[i]]\\n\\t\\t\\t] = data[i];\\n\\t\\t}\\n\\n\\t\\tuserActivityMatrix[addressToId[userAddress]][\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t] += 1;\\n\\n\\t\\t// rewarding the users for sharing data\\n\\t\\tbool sent = userAddress.send(userRewardPerDatapoint);\\n\\t\\trequire(sent, \\\"Failed to reward user\\\");\\n\\n\\t\\t// increasing credit limit for provider\\n\\t\\tconsumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\\n\\n\\t\\temit NewAnalytics(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tuint256(schemaAnalytics.schemaCategory)\\n\\t\\t);\\n\\t}\\n\\n  function updateUserReward(uint256 newReward) external onlyOwner {\\n    userRewardPerDatapoint = newReward;\\n  }\\n\\n\\tfunction getUserActivityMatrix()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[][] memory)\\n\\t{\\n\\t\\treturn userActivityMatrix;\\n\\t}\\n\\n  function getAllSchemas() external view returns (SchemaDetails[] memory) {\\n    SchemaDetails[] memory schemaDetails = new SchemaDetails[](dappAnalytics.length - 1);\\n    for (uint256 i = 1; i < dappAnalytics.length; i++) {\\n      // bytes32[] memory schemaColumns = new bytes32[](dappAnalytics[i].columns.length);\\n      SchemaDetails memory schemaDetail;\\n      schemaDetail.schemaName = dappAnalytics[i].schemaName;\\n      schemaDetail.columns = dappAnalytics[i].columns;\\n      schemaDetail.schemaCategory = dappAnalytics[i].schemaCategory;\\n      schemaDetail.totalRecords = dappAnalytics[i].data.length;\\n      schemaDetails[i - 1] = schemaDetail;\\n    }\\n\\n    return schemaDetails;\\n  }\\n\\n\\tfunction getAnalyticsDataBySchemaName(\\n\\t\\tbytes32 schemaName\\n\\t) external view returns (uint256[][] memory) {\\n\\t\\treturn dappAnalytics[schemaIndex[schemaName]].data;\\n\\t}\\n\\n\\tfunction getColumnsOfSchema(\\n\\t\\tbytes32 schemaName\\n\\t) external view returns (bytes32[] memory) {\\n\\t\\treturn dappAnalytics[schemaIndex[schemaName]].columns;\\n\\t}\\n\\n  function getSchemaAddressToId(\\n    bytes32 schemaName,\\n    address userAddress\\n  ) external view returns (uint256) {\\n    return dappAnalytics[schemaIndex[schemaName]].addressToId[userAddress];\\n  }\\n\\n  function getSchemaIdToAddress(\\n    bytes32 schemaName,\\n    uint256 userId\\n  ) external view returns (address) {\\n    return dappAnalytics[schemaIndex[schemaName]].idToAddress[userId];\\n  }\\n\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0x018bc280bd319aeeb71d64238d8876969c7b42663df00fff356b1d02692d4b51\",\"license\":\"MIT\"},\"contracts/LogisticRegression.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./DataLayer.sol\\\";\\n\\ncontract LogisticRegression {\\n\\tDataLayer dataLayer;\\n\\n\\tint256 constant FIXED_POINT = 1e9; // Scaling factor for fixed-point arithmetic\\n\\n\\tconstructor(DataLayer _dataLayer) {\\n\\t\\tdataLayer = _dataLayer;\\n\\t}\\n\\n  // Get linear regression for onchain schema data\\n\\tfunction getLogisticRegression(\\n\\t\\tbytes32 schemaName,\\n    uint256[] memory trainingColIndices,\\n\\t\\tuint256 labelColIndex,\\n    int256[][] memory testData,\\n\\t\\tint256 learningRate,\\n\\t\\tuint256 iterations,\\n\\t\\tint256 bias\\n\\t) public view returns (int256[] memory) {\\n\\t\\tuint256[][] memory analyticsData = dataLayer\\n\\t\\t\\t.getAnalyticsDataBySchemaName(schemaName);\\n\\n    int256[][] memory trainingData = new int256[][](analyticsData.length);\\n\\n\\t\\tint256[] memory labels = new int256[](analyticsData.length);\\n\\n    trainingData[0] = new int256[](trainingColIndices.length);\\n\\n\\t\\tfor (uint256 i = 1; i < analyticsData.length; i++) {\\n      trainingData[i] = new int256[](trainingColIndices.length);\\n\\t\\t\\tlabels[i] = int256(analyticsData[i][labelColIndex]) * FIXED_POINT;\\n\\n      for (uint256 j = 0; j < trainingColIndices.length; j++) {\\n        trainingData[i][j] = int256(analyticsData[i][trainingColIndices[j]]) * FIXED_POINT;\\n      }\\n\\t\\t}\\n\\n\\t\\tint256[] memory weights = fit(\\n\\t\\t\\ttrainingData,\\n\\t\\t\\tlabels,\\n\\t\\t\\tlearningRate,\\n\\t\\t\\titerations,\\n\\t\\t\\tbias\\n\\t\\t);\\n\\n\\t\\tint256[] memory predictions = predict(testData, weights, bias);\\n\\n\\t\\treturn predictions;\\n\\t}\\n\\n\\tfunction getLogisticRegressionOffChainData(\\n\\t\\tint256[][] memory analyticsData,\\n\\t\\tint256[] memory labels,\\n\\t\\tint256[][] memory testData,\\n\\t\\tint256 learningRate,\\n\\t\\tuint256 iterations,\\n\\t\\tint256 bias\\n\\t) public pure returns (int256[] memory) {\\n\\t\\tint256[] memory weights = fit(\\n\\t\\t\\tanalyticsData,\\n\\t\\t\\tlabels,\\n\\t\\t\\tlearningRate,\\n\\t\\t\\titerations,\\n\\t\\t\\tbias\\n\\t\\t);\\n\\n\\t\\tint256[] memory predictions = predict(testData, weights, bias);\\n\\n\\t\\treturn predictions;\\n\\t}\\n\\n\\t/**\\n\\t * Fits the logistic regression model to the training data\\n\\t * @param X - The training features.\\n\\t * @param y - The training labels.\\n\\t */\\n\\tfunction fit(\\n\\t\\tint256[][] memory X,\\n\\t\\tint256[] memory y,\\n\\t\\tint256 learningRate,\\n\\t\\tuint256 iterations,\\n\\t\\tint256 bias\\n\\t) public pure returns (int256[] memory) {\\n\\t\\trequire(\\n\\t\\t\\tX.length == y.length,\\n\\t\\t\\t\\\"Feature and label arrays must have the same length.\\\"\\n\\t\\t);\\n\\n\\t\\t// Initialize weights\\n\\t\\tint256[] memory weights = new int256[](X[0].length);\\n\\n\\t\\tfor (uint256 iter = 0; iter < iterations; iter++) {\\n\\t\\t\\tint256[] memory linearModel = new int256[](X.length);\\n\\t\\t\\tint256[] memory predictions = new int256[](X.length);\\n\\t\\t\\tint256[] memory dw = new int256[](X[0].length);\\n\\t\\t\\tint256 db = 0;\\n\\n\\t\\t\\t// Compute linear model and predictions\\n\\t\\t\\tfor (uint256 i = 1; i < X.length; i++) {\\n\\t\\t\\t\\tlinearModel[i] = bias;\\n\\t\\t\\t\\tfor (uint256 j = 0; j < X[0].length; j++) {\\n\\t\\t\\t\\t\\tlinearModel[i] += (weights[j] * X[i][j]) / FIXED_POINT;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tpredictions[i] = sigmoid(linearModel[i]);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Compute gradients\\n\\t\\t\\tfor (uint256 i = 1; i < X.length; i++) {\\n\\t\\t\\t\\tint256 error = predictions[i] - y[i];\\n\\t\\t\\t\\tfor (uint256 j = 0; j < X[0].length; j++) {\\n\\t\\t\\t\\t\\tdw[j] += (X[i][j] * error) / FIXED_POINT;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdb += error;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Update weights and bias\\n\\t\\t\\tfor (uint256 j = 0; j < X[0].length; j++) {\\n\\t\\t\\t\\tweights[j] -= (learningRate * dw[j]) / (int256(X.length) * FIXED_POINT);\\n\\t\\t\\t}\\n\\t\\t\\tbias -= (learningRate * db) / (int256(X.length) * FIXED_POINT);\\n\\t\\t}\\n\\n\\t\\treturn weights;\\n\\t}\\n\\n\\t/**\\n\\t * Predicts the labels for the given input data\\n\\t * @param X - The input features.\\n\\t */\\n\\tfunction predict(\\n\\t\\tint256[][] memory X,\\n\\t\\tint256[] memory weights,\\n\\t\\tint256 bias\\n\\t) public pure returns (int256[] memory) {\\n\\t\\tuint256 m = X.length;\\n\\t\\tint256[] memory predictions = new int256[](m);\\n\\n\\t\\tfor (uint256 i = 0; i < m; i++) {\\n\\t\\t\\tint256 linearModel = bias;\\n\\t\\t\\tfor (uint256 j = 0; j < X[0].length; j++) {\\n\\t\\t\\t\\tlinearModel += (weights[j] * X[i][j]) / FIXED_POINT;\\n\\t\\t\\t}\\n\\t\\t\\tpredictions[i] = sigmoid(linearModel) > (FIXED_POINT / int256(2))\\n\\t\\t\\t\\t? int256(1 * FIXED_POINT)\\n\\t\\t\\t\\t: int256(0);\\n\\t\\t}\\n\\n\\t\\treturn predictions;\\n\\t}\\n\\n\\t/**\\n\\t * Sigmoid function\\n\\t * @param z - The input value.\\n\\t */\\n\\tfunction sigmoid(int256 z) internal pure returns (int256) {\\n\\t\\tint256 expValue = exp(z);\\n\\t\\treturn (expValue * FIXED_POINT) / (FIXED_POINT + expValue);\\n\\t}\\n\\n\\t/**\\n\\t * Exponential function approximation\\n\\t * @param x - The input value.\\n\\t */\\n\\tfunction exp(int256 x) internal pure returns (int256) {\\n\\t\\tint256 sum = FIXED_POINT;\\n\\t\\tint256 term = FIXED_POINT;\\n\\t\\tfor (int256 i = 1; i < 30; i++) {\\n\\t\\t\\tterm = (term * x) / int256(i * FIXED_POINT);\\n\\t\\t\\tsum += term;\\n\\t\\t}\\n\\t\\treturn sum;\\n\\t}\\n}\\n\",\"keccak256\":\"0x087f6b07c5c91f2fcd017c5eafec0f3b16b541529477030e74e54c5907150f37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461007457601f610c9038819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600080546001600160a01b031916919091179055604051610c0090816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60a06040815260c06040526004908136101561001a57600080fd5b600091823560e01c80631bb0da8a1461049f578063348920fa14610445578063a9a56292146100cd5763e689266d1461005257600080fd5b346100c957816003193601126100c95767ffffffffffffffff81358181116100c55761008190369084016105d4565b936024359182116100c25750926100a16100b2926100be95369101610571565b6084359160643591604435916107c0565b90515191829182610655565b0390f35b80fd5b8480fd5b8280fd5b5091346100c25760e03660031901126100c25767ffffffffffffffff926024358481116100c957366023820112156100c957808201359261010d84610559565b9261011b8651519485610521565b84845260809260208452602085016024600597881b830101913683116100c557602401905b828210610435575050506064358781116100c95761016190369083016105d4565b9660c435958360018060a01b038154169360248a515180968193630596815760e21b83528035908301525afa92831561042a578493610320575b505050928351926101ab84610559565b936101b98851519586610521565b8085526101c8601f1991610559565b0190835b82811061030d575050506101e08451610690565b936101eb8251610690565b6101f4856106c2565b526101fe846106c2565b5060019260443584805b61022f575b6100be8a6100b28b8e610229828e8e60a43591608435916107c0565b90610a88565b8351811015610308579084939291610248879651610690565b610252828a6106e5565b5261025d81896106e5565b5061027b6102758361026f84886106e5565b516106e5565b5161071e565b610285828b6106e5565b5282865b6102a2575b50610298906106f9565b9091929394610208565b8886979293949596518210156102fb57906102ef916102e98261026f876102e36102758e6102dc8f6102d58689926106e5565b51926106e5565b51906106e5565b946106e5565b526106f9565b81969594939291610289565b509594939291909561028e565b61020d565b81516060878301909101528151016101cc565b909192503d8085833e6103338183610521565b8101908551818303126100c55780519084821161042657019181601f840112156100c55782519161036383610559565b946103718b51519687610521565b8386528751948580880195851b82010195838711610422578101945b8686106103a3575050505050505038808061019b565b855183811161041e57820184603f8201121561041e578a51810151908e6103c983610559565b926103d78251519485610521565b8084528d518401915180918a1b8401019288841161041a5701905b82821061040a5750505081528951958601950161038d565b815181528d5191820191016103f2565b8d80fd5b8980fd5b8880fd5b8580fd5b8851513d86823e3d90fd5b8135815285519182019101610140565b50346100c95760603660031901126100c95767ffffffffffffffff81358181116100c55761047690369084016105d4565b936024359182116100c25750926104966100b2926100be95369101610571565b60443591610a88565b50346100c95760c03660031901126100c95767ffffffffffffffff9080358281116100c5576104d190369083016105d4565b91602435818111610426576104e99036908401610571565b946044359182116100c257509161022961050d6100be96936100b2953691016105d4565b9160a43593849160843591606435916107c0565b90601f8019910116810190811067ffffffffffffffff82111761054357604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116105435760051b60200190565b81601f820112156105cf5780359161058883610559565b926105966040519485610521565b808452602092838086019260051b8201019283116105cf578301905b8282106105c0575050505090565b813581529083019083016105b2565b600080fd5b9080601f830112156105cf578135906105ec82610559565b926105fa6040519485610521565b828452602092838086019160051b830101928084116105cf57848301915b8483106106285750505050505090565b823567ffffffffffffffff81116105cf57869161064a84848094890101610571565b815201920191610618565b6020908160408183019282815285518094520193019160005b82811061067c575050505090565b83518552938101939281019260010161066e565b9061069a82610559565b6106a76040519182610521565b82815280926106b8601f1991610559565b0190602036910137565b8051156106cf5760200190565b634e487b7160e01b600052603260045260246000fd5b80518210156106cf5760209160051b010190565b60001981146107085760010190565b634e487b7160e01b600052601160045260246000fd5b90633b9aca009182810292818405149015171561070857565b818102929160008212600160ff1b82141661070857818405149015171561070857565b811561077557600160ff1b8114600019831416610708570590565b634e487b7160e01b600052601260045260246000fd5b9190916000838201938412911290801582169115161761070857565b8181039291600013801582851316918412161761070857565b93929190938051855103610a275790936107e36107dc836106c2565b5151610690565b946000935b8085106107f85750505050505090565b6108088495979498969851610690565b976108138651610690565b976108206107dc886106c2565b6000936001995b89518b10156108d2578c908561083d8d846106e5565b52865b8d61084a8d6106c2565b51518210156108a75750808d6102e961089b8f8f633b9aca00916108838761026f8861087c6108a29c61088a976106e5565b51946106e5565b5190610737565b0561089584896106e5565b5161078b565b91866106e5565b610840565b90506102e98d6108c681949f6108c0906108cc976106e5565b51610b40565b926106e5565b99610827565b9b5097969098509891909394929860019a5b87518c101561097f5761090d8c6109066108fe82886106e5565b5191886106e5565b51906107a7565b9860005b61091a8a6106c2565b515181101561095f57808c8f826108c68f8f633b9aca009161094961095a9961026f6102e99861094f956106e5565b51610737565b0561089583866106e5565b610911565b509b9a6109779192996109719161078b565b9a6106f9565b9a97906108e4565b9250979495969098995060005b610995886106c2565b51518110156109eb57806109dc6109cc6109bc6109b56109e6958b6106e5565b518b610737565b6109c68c5161071e565b9061075a565b6109d6838d6106e5565b516107a7565b6102e9828c6106e5565b61098c565b5095935097610a1d91929697610a11610a07610a179388610737565b6109c6875161071e565b906107a7565b956106f9565b93929091926107e8565b60405162461bcd60e51b815260206004820152603360248201527f4665617475726520616e64206c6162656c20617272617973206d7573742068616044820152723b32903a34329039b0b6b2903632b733ba341760691b6064820152608490fd5b9190918051610a9681610690565b936000915b808310610aaa57505050505090565b909192939586916000925b610abe876106c2565b5151841015610afc57610af0610af691633b9aca00610ae98a6108838961026f8d61087c838f6106e5565b059061078b565b936106f9565b92610ab5565b610b3292989350610b16631dcd6500919796929597610b40565b13600090600014610b3b5750633b9aca005b6102e982896106e5565b91939093610a9b565b610b28565b633b9aca008060019283925b601e8412610b7d5750509050610b618161071e565b9181633b9aca00019182121661070857610b7a9161075a565b90565b610b96610b8d83610b9d93610737565b6109c68661071e565b809361078b565b926001600160ff1b038114610bb55784019291610b4c565b60246000634e487b7160e01b81526011600452fdfea2646970667358221220e8a552a5df9ba4e5e82614da435a9a63edc9c7d2afd756b5a0f39e65e81e886c64736f6c63430008110033",
  "deployedBytecode": "0x60a06040815260c06040526004908136101561001a57600080fd5b600091823560e01c80631bb0da8a1461049f578063348920fa14610445578063a9a56292146100cd5763e689266d1461005257600080fd5b346100c957816003193601126100c95767ffffffffffffffff81358181116100c55761008190369084016105d4565b936024359182116100c25750926100a16100b2926100be95369101610571565b6084359160643591604435916107c0565b90515191829182610655565b0390f35b80fd5b8480fd5b8280fd5b5091346100c25760e03660031901126100c25767ffffffffffffffff926024358481116100c957366023820112156100c957808201359261010d84610559565b9261011b8651519485610521565b84845260809260208452602085016024600597881b830101913683116100c557602401905b828210610435575050506064358781116100c95761016190369083016105d4565b9660c435958360018060a01b038154169360248a515180968193630596815760e21b83528035908301525afa92831561042a578493610320575b505050928351926101ab84610559565b936101b98851519586610521565b8085526101c8601f1991610559565b0190835b82811061030d575050506101e08451610690565b936101eb8251610690565b6101f4856106c2565b526101fe846106c2565b5060019260443584805b61022f575b6100be8a6100b28b8e610229828e8e60a43591608435916107c0565b90610a88565b8351811015610308579084939291610248879651610690565b610252828a6106e5565b5261025d81896106e5565b5061027b6102758361026f84886106e5565b516106e5565b5161071e565b610285828b6106e5565b5282865b6102a2575b50610298906106f9565b9091929394610208565b8886979293949596518210156102fb57906102ef916102e98261026f876102e36102758e6102dc8f6102d58689926106e5565b51926106e5565b51906106e5565b946106e5565b526106f9565b81969594939291610289565b509594939291909561028e565b61020d565b81516060878301909101528151016101cc565b909192503d8085833e6103338183610521565b8101908551818303126100c55780519084821161042657019181601f840112156100c55782519161036383610559565b946103718b51519687610521565b8386528751948580880195851b82010195838711610422578101945b8686106103a3575050505050505038808061019b565b855183811161041e57820184603f8201121561041e578a51810151908e6103c983610559565b926103d78251519485610521565b8084528d518401915180918a1b8401019288841161041a5701905b82821061040a5750505081528951958601950161038d565b815181528d5191820191016103f2565b8d80fd5b8980fd5b8880fd5b8580fd5b8851513d86823e3d90fd5b8135815285519182019101610140565b50346100c95760603660031901126100c95767ffffffffffffffff81358181116100c55761047690369084016105d4565b936024359182116100c25750926104966100b2926100be95369101610571565b60443591610a88565b50346100c95760c03660031901126100c95767ffffffffffffffff9080358281116100c5576104d190369083016105d4565b91602435818111610426576104e99036908401610571565b946044359182116100c257509161022961050d6100be96936100b2953691016105d4565b9160a43593849160843591606435916107c0565b90601f8019910116810190811067ffffffffffffffff82111761054357604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116105435760051b60200190565b81601f820112156105cf5780359161058883610559565b926105966040519485610521565b808452602092838086019260051b8201019283116105cf578301905b8282106105c0575050505090565b813581529083019083016105b2565b600080fd5b9080601f830112156105cf578135906105ec82610559565b926105fa6040519485610521565b828452602092838086019160051b830101928084116105cf57848301915b8483106106285750505050505090565b823567ffffffffffffffff81116105cf57869161064a84848094890101610571565b815201920191610618565b6020908160408183019282815285518094520193019160005b82811061067c575050505090565b83518552938101939281019260010161066e565b9061069a82610559565b6106a76040519182610521565b82815280926106b8601f1991610559565b0190602036910137565b8051156106cf5760200190565b634e487b7160e01b600052603260045260246000fd5b80518210156106cf5760209160051b010190565b60001981146107085760010190565b634e487b7160e01b600052601160045260246000fd5b90633b9aca009182810292818405149015171561070857565b818102929160008212600160ff1b82141661070857818405149015171561070857565b811561077557600160ff1b8114600019831416610708570590565b634e487b7160e01b600052601260045260246000fd5b9190916000838201938412911290801582169115161761070857565b8181039291600013801582851316918412161761070857565b93929190938051855103610a275790936107e36107dc836106c2565b5151610690565b946000935b8085106107f85750505050505090565b6108088495979498969851610690565b976108138651610690565b976108206107dc886106c2565b6000936001995b89518b10156108d2578c908561083d8d846106e5565b52865b8d61084a8d6106c2565b51518210156108a75750808d6102e961089b8f8f633b9aca00916108838761026f8861087c6108a29c61088a976106e5565b51946106e5565b5190610737565b0561089584896106e5565b5161078b565b91866106e5565b610840565b90506102e98d6108c681949f6108c0906108cc976106e5565b51610b40565b926106e5565b99610827565b9b5097969098509891909394929860019a5b87518c101561097f5761090d8c6109066108fe82886106e5565b5191886106e5565b51906107a7565b9860005b61091a8a6106c2565b515181101561095f57808c8f826108c68f8f633b9aca009161094961095a9961026f6102e99861094f956106e5565b51610737565b0561089583866106e5565b610911565b509b9a6109779192996109719161078b565b9a6106f9565b9a97906108e4565b9250979495969098995060005b610995886106c2565b51518110156109eb57806109dc6109cc6109bc6109b56109e6958b6106e5565b518b610737565b6109c68c5161071e565b9061075a565b6109d6838d6106e5565b516107a7565b6102e9828c6106e5565b61098c565b5095935097610a1d91929697610a11610a07610a179388610737565b6109c6875161071e565b906107a7565b956106f9565b93929091926107e8565b60405162461bcd60e51b815260206004820152603360248201527f4665617475726520616e64206c6162656c20617272617973206d7573742068616044820152723b32903a34329039b0b6b2903632b733ba341760691b6064820152608490fd5b9190918051610a9681610690565b936000915b808310610aaa57505050505090565b909192939586916000925b610abe876106c2565b5151841015610afc57610af0610af691633b9aca00610ae98a6108838961026f8d61087c838f6106e5565b059061078b565b936106f9565b92610ab5565b610b3292989350610b16631dcd6500919796929597610b40565b13600090600014610b3b5750633b9aca005b6102e982896106e5565b91939093610a9b565b610b28565b633b9aca008060019283925b601e8412610b7d5750509050610b618161071e565b9181633b9aca00019182121661070857610b7a9161075a565b90565b610b96610b8d83610b9d93610737565b6109c68661071e565b809361078b565b926001600160ff1b038114610bb55784019291610b4c565b60246000634e487b7160e01b81526011600452fdfea2646970667358221220e8a552a5df9ba4e5e82614da435a9a63edc9c7d2afd756b5a0f39e65e81e886c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "fit(int256[][],int256[],int256,uint256,int256)": {
        "params": {
          "X": "- The training features.",
          "y": "- The training labels."
        }
      },
      "predict(int256[][],int256[],int256)": {
        "params": {
          "X": "- The input features."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fit(int256[][],int256[],int256,uint256,int256)": {
        "notice": "Fits the logistic regression model to the training data"
      },
      "predict(int256[][],int256[],int256)": {
        "notice": "Predicts the labels for the given input data"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3170,
        "contract": "contracts/LogisticRegression.sol:LogisticRegression",
        "label": "dataLayer",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(DataLayer)1579"
      }
    ],
    "types": {
      "t_contract(DataLayer)1579": {
        "encoding": "inplace",
        "label": "contract DataLayer",
        "numberOfBytes": "20"
      }
    }
  }
}