{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/UserAnalytics.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract UserAnalytics is Ownable {\n\tuint256[][] public userActivityMatrix;\n\tmapping(address => uint256) public addressToId;\n\tmapping(uint256 => address) public idToAddress;\n\tmapping(address => uint256) public consumerCredits;\n\tmapping(bytes32 => uint256) public schemaIndex;\n\tuint256 public latestIndex;\n\tuint256 public totalCategories;\n  uint256 public userRewardPerDatapoint;\n\n\tenum Category {\n\t\tGaming,\n\t\tMarketplace,\n\t\tDefi,\n\t\tDao,\n\t\tWeb3Social,\n\t\tIdentity,\n\t\tCertificates\n\t}\n\n  struct SchemaDetails {\n    bytes32 schemaName;\n\t\tbytes32[] columns;\n\t\tCategory schemaCategory;\n    uint256 totalRecords;\n  }\n\n\tstruct Analytics {\n\t\tbytes32 schemaName;\n\t\tbytes32[] columns;\n\t\tCategory schemaCategory;\n\t\tuint256[][] data;\n\t\tmapping(address => uint256) addressToId;\n\t\tmapping(uint256 => address) idToAddress;\n\t\tmapping(bytes32 => uint256) columnToIndex;\n\t}\n\n\tstruct similarityPair {\n\t\tuint256 index;\n\t\tuint256 similarity;\n\t}\n\n\tAnalytics[] public dappAnalytics;\n\n\tconstructor() Ownable() {\n\t\tuint256[] memory initialMatrix;\n\t\tuserActivityMatrix.push(initialMatrix);\n\t\tlatestIndex = 0;\n\t\ttotalCategories = 7;\n\t\tdappAnalytics.push();\n    userRewardPerDatapoint = 10000000000000000;\n\t}\n\n\tevent NewAnalytics(address user, address provider, uint256 category);\n\n\tfunction addUser(address userAddress) external {\n\t\t// get the total length of current activity matrix\n\t\tlatestIndex = latestIndex + 1;\n\t\tuint256[] memory initialMatrix;\n\t\tuserActivityMatrix.push(initialMatrix);\n\n\t\t// add the new user details\n\t\tfor (uint256 i = 0; i < totalCategories; i++) {\n\t\t\tuserActivityMatrix[latestIndex].push(0);\n\t\t}\n\n\t\t// add user id to address mapping\n\t\taddressToId[userAddress] = latestIndex;\n\t\tidToAddress[latestIndex] = userAddress;\n\t}\n\n\tfunction addSchema(\n\t\tbytes32 schemaName,\n\t\tbytes32[] calldata columns,\n\t\tCategory category\n\t) external {\n\t\t// Cannot have two schema with same name\n    require(schemaIndex[schemaName] == uint256(0), \"SCHEMA NAME EXISTS\");\n\n    // initializing schema with defaults\n\t\tAnalytics storage analytics = dappAnalytics.push();\n\t\tanalytics.schemaName = schemaName;\n\t\tanalytics.schemaCategory = category;\n\t\t\n    uint256[] memory initialUser;\n\t\tanalytics.data.push(initialUser);\n\t\t\n    for (uint256 i = 0; i < columns.length; i++) {\n\t\t\tanalytics.data[0].push(0);\n\t\t\tanalytics.columns.push(columns[i]);\n\t\t\tanalytics.columnToIndex[columns[i]] = i;\n\t\t}\n\n\t\t// adding to schema index map\n\t\tschemaIndex[schemaName] = dappAnalytics.length - 1;\n\t}\n\n\tfunction addAnalytics(\n\t\taddress payable userAddress,\n\t\tbytes32 schemaName,\n\t\tbytes32[] calldata columns,\n\t\tuint256[] calldata data\n\t) public payable {\n\t\trequire(schemaIndex[schemaName] != 0, \"SCHEMA NOT PRESENT\");\n\n\t\t// add user if not already present\n\t\tif (addressToId[userAddress] == 0) {\n\t\t\tthis.addUser(userAddress);\n\t\t}\n\n\t\t// retrieve storage instance\n\t\tAnalytics storage schemaAnalytics = dappAnalytics[\n\t\t\tschemaIndex[schemaName]\n\t\t];\n\n\t\t// push new user if not already present\n\t\tif (schemaAnalytics.addressToId[userAddress] == 0) {\n\t\t\tschemaAnalytics.data.push();\n\t\t\tfor (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\n\t\t\t\tschemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\n\t\t\t}\n\n\t\t\tschemaAnalytics.addressToId[userAddress] =\n\t\t\t\tschemaAnalytics.data.length -\n\t\t\t\t1;\n\t\t\tschemaAnalytics.idToAddress[\n\t\t\t\tschemaAnalytics.data.length - 1\n\t\t\t] = userAddress;\n\t\t}\n\n\t\t// add to the existing data\n\t\tfor (uint256 i = 0; i < columns.length; i++) {\n\t\t\tschemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\n\t\t\t\tschemaAnalytics.columnToIndex[columns[i]]\n\t\t\t] += data[i];\n\t\t}\n\n\t\tuserActivityMatrix[addressToId[userAddress]][\n\t\t\tuint256(schemaAnalytics.schemaCategory)\n\t\t] += 1;\n\n\t\t// rewarding the users for sharing data\n\t\tbool sent = userAddress.send(userRewardPerDatapoint);\n\t\trequire(sent, \"Failed to reward user\");\n\n\t\t// increasing credit limit for provider\n\t\tconsumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\n\n\t\temit NewAnalytics(\n\t\t\tuserAddress,\n\t\t\tmsg.sender,\n\t\t\tuint256(schemaAnalytics.schemaCategory)\n\t\t);\n\t}\n\n\tfunction updateAnalytics(\n\t\taddress payable userAddress,\n\t\tbytes32 schemaName,\n\t\tbytes32[] calldata columns,\n\t\tuint256[] calldata data\n\t) public payable {\n\t\t// add user if not already present\n\t\tif (addressToId[userAddress] == 0) {\n\t\t\tthis.addUser(userAddress);\n\t\t}\n\n\t\t// retrieve storage instance\n\t\tAnalytics storage schemaAnalytics = dappAnalytics[\n\t\t\tschemaIndex[schemaName]\n\t\t];\n\n\t\t// push new user if not already present\n\t\tif (schemaAnalytics.addressToId[userAddress] == 0) {\n\t\t\tschemaAnalytics.data.push();\n\t\t\tfor (uint256 i = 0; i < schemaAnalytics.columns.length; i++) {\n\t\t\t\tschemaAnalytics.data[schemaAnalytics.data.length - 1].push(0);\n\t\t\t}\n\n\t\t\tschemaAnalytics.addressToId[userAddress] =\n\t\t\t\tschemaAnalytics.data.length -\n\t\t\t\t1;\n\t\t\tschemaAnalytics.idToAddress[\n\t\t\t\tschemaAnalytics.data.length - 1\n\t\t\t] = userAddress;\n\t\t}\n\n\t\t// replace the existing user data with new one\n\t\tfor (uint256 i = 0; i < columns.length; i++) {\n\t\t\tschemaAnalytics.data[schemaAnalytics.addressToId[userAddress]][\n\t\t\t\tschemaAnalytics.columnToIndex[columns[i]]\n\t\t\t] = data[i];\n\t\t}\n\n\t\tuserActivityMatrix[addressToId[userAddress]][\n\t\t\tuint256(schemaAnalytics.schemaCategory)\n\t\t] += 1;\n\n\t\t// rewarding the users for sharing data\n\t\tbool sent = userAddress.send(userRewardPerDatapoint);\n\t\trequire(sent, \"Failed to reward user\");\n\n\t\t// increasing credit limit for provider\n\t\tconsumerCredits[msg.sender] = consumerCredits[msg.sender] + 1;\n\n\t\temit NewAnalytics(\n\t\t\tuserAddress,\n\t\t\tmsg.sender,\n\t\t\tuint256(schemaAnalytics.schemaCategory)\n\t\t);\n\t}\n\n  function updateUserReward(uint256 newReward) external onlyOwner {\n    userRewardPerDatapoint = newReward;\n  }\n\n\tfunction getUserActivityMatrix()\n\t\texternal\n\t\tview\n\t\treturns (uint256[][] memory)\n\t{\n\t\treturn userActivityMatrix;\n\t}\n\n  function getAllSchemas() external view returns (SchemaDetails[] memory) {\n    SchemaDetails[] memory schemaDetails = new SchemaDetails[](dappAnalytics.length - 1);\n    for (uint256 i = 1; i < dappAnalytics.length; i++) {\n      // bytes32[] memory schemaColumns = new bytes32[](dappAnalytics[i].columns.length);\n      SchemaDetails memory schemaDetail;\n      schemaDetail.schemaName = dappAnalytics[i].schemaName;\n      schemaDetail.columns = dappAnalytics[i].columns;\n      schemaDetail.schemaCategory = dappAnalytics[i].schemaCategory;\n      schemaDetail.totalRecords = dappAnalytics[i].data.length;\n      schemaDetails[i - 1] = schemaDetail;\n    }\n\n    return schemaDetails;\n  }\n\n\tfunction getAnalyticsDataBySchemaName(\n\t\tbytes32 schemaName\n\t) external view returns (uint256[][] memory) {\n\t\treturn dappAnalytics[schemaIndex[schemaName]].data;\n\t}\n\n\tfunction getColumnsOfSchema(\n\t\tbytes32 schemaName\n\t) external view returns (bytes32[] memory) {\n\t\treturn dappAnalytics[schemaIndex[schemaName]].columns;\n\t}\n\n\tfunction getRecommendedFollowers(\n\t\taddress userAddress,\n\t\tuint64 k\n\t) external view returns (address[][] memory) {\n\t\tuint256[][] memory similarityMatrix = computeSimilarityMatrix();\n\n\t\taddress[][] memory recommendedFollowers = recommendFollowers(\n\t\t\taddressToId[userAddress],\n\t\t\tsimilarityMatrix,\n\t\t\tk\n\t\t);\n\n\t\treturn recommendedFollowers;\n\t}\n\n\t// Function to calculate cosine similarity between two users\n\tfunction cosineSimilarity(\n\t\tuint256[] memory user1,\n\t\tuint256[] memory user2\n\t) internal pure returns (uint256) {\n\t\tuint256 dotProduct = dot(user1, user2);\n\t\tuint256 normUser1 = sqrt(dot(user1, user1));\n\t\tuint256 normUser2 = sqrt(dot(user2, user2));\n\t\treturn ((dotProduct * 100) / normUser1) * normUser2;\n\t}\n\n\t// Function to compute user-user similarity matrix\n\tfunction computeSimilarityMatrix()\n\t\tinternal\n\t\tview\n\t\treturns (uint256[][] memory)\n\t{\n\t\tuint256 numUsers = userActivityMatrix.length;\n\t\tuint256[][] memory similarityMatrix = new uint256[][](numUsers);\n\n\t\t// similarityMatrix.push();\n\t\tfor (uint256 i = 1; i < numUsers; i++) {\n\t\t\tuint256[] memory row = new uint256[](numUsers);\n\t\t\tsimilarityMatrix[i] = row;\n\n\t\t\tfor (uint64 j = 1; j < numUsers; j++) {\n\t\t\t\tuint256[] memory user1 = userActivityMatrix[i];\n\t\t\t\tuint256[] memory user2 = userActivityMatrix[j];\n\t\t\t\tsimilarityMatrix[i][j] = cosineSimilarity(user1, user2);\n\t\t\t}\n\t\t}\n\n\t\treturn similarityMatrix;\n\t}\n\n\t// Function to recommend followers for a given user\n\tfunction recommendFollowers(\n\t\tuint256 userIndex,\n\t\tuint256[][] memory similarityMatrix,\n\t\tuint64 k\n\t) public view returns (address[][] memory) {\n\t\tsimilarityPair[] memory similarUsers = new similarityPair[](\n\t\t\tsimilarityMatrix[userIndex].length - 1\n\t\t);\n\t\tuint256 idx = 0;\n\n\t\t// Find k most similar users to the target user\n\t\tfor (uint256 j = 1; j < similarityMatrix[userIndex].length; j++) {\n\t\t\tif (j != userIndex) {\n\t\t\t\tsimilarityPair memory row;\n\t\t\t\trow.index = j;\n\t\t\t\trow.similarity = similarityMatrix[userIndex][j];\n\t\t\t\tsimilarUsers[idx] = row;\n\t\t\t\tidx += 1;\n\t\t\t}\n\t\t}\n\n\t\t// Sort similar users by descending similarity\n\t\tsimilarUsers = bubbleSort(similarUsers);\n\n\t\t// Recommend followers from the top k similar users\n\t\taddress[][] memory recommendedFollowers = new address[][](\n\t\t\ttotalCategories\n\t\t);\n\t\tfor (uint64 i = 0; i < k; i++) {\n\t\t\tuint64 _idx = 0;\n\t\t\tfor (uint256 j = 0; j < totalCategories; j++) {\n\t\t\t\taddress[] memory followerRow = new address[](k);\n\t\t\t\trecommendedFollowers[j] = followerRow;\n\t\t\t\tif (userActivityMatrix[similarUsers[i].index][j] > 0) {\n\t\t\t\t\trecommendedFollowers[j][_idx] = idToAddress[\n\t\t\t\t\t\tsimilarUsers[i].index\n\t\t\t\t\t];\n\t\t\t\t\t_idx = _idx + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn recommendedFollowers;\n\t}\n\n\t/**\n\t * @dev Bubble sort.\n\t */\n\tfunction bubbleSort(\n\t\tsimilarityPair[] memory similarUsers\n\t) internal pure returns (similarityPair[] memory) {\n\t\tuint256 n = similarUsers.length;\n\t\tfor (uint256 i = 0; i < n - 1; i++) {\n\t\t\tfor (uint256 j = 0; j < n - i - 1; j++) {\n\t\t\t\tif (\n\t\t\t\t\tsimilarUsers[j].similarity > similarUsers[j + 1].similarity\n\t\t\t\t) {\n\t\t\t\t\t(similarUsers[j], similarUsers[j + 1]) = (\n\t\t\t\t\t\tsimilarUsers[j + 1],\n\t\t\t\t\t\tsimilarUsers[j]\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn similarUsers;\n\t}\n\n\t/**\n\t * @dev Returns the square root of a number.\n\t */\n\tfunction sqrt(uint256 x) internal pure returns (uint256) {\n\t\tuint256 z = (x + 1) / 2;\n\t\tuint256 y = x;\n\t\twhile (z < y) {\n\t\t\ty = z;\n\t\t\tz = ((x / z) + z) / 2;\n\t\t}\n\t\treturn y;\n\t}\n\n\t/**\n\t * @dev Returns the dot product of two vectors.\n\t */\n\tfunction dot(\n\t\tuint256[] memory x,\n\t\tuint256[] memory y\n\t) internal pure returns (uint256) {\n\t\trequire(x.length == y.length);\n\n\t\tuint256 output;\n\t\tfor (uint256 i = 0; i < x.length; i++) {\n\t\t\toutput = (x[i] * y[i]) + output;\n\t\t}\n\n\t\treturn output;\n\t}\n\n\treceive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}